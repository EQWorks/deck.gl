{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["UPDATE_THRESHOLD_KM","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","lat","lng","h3ToPolygon","hexId","vertices","refLng","pt","deltaLng","defaultProps","Object","assign","PolygonLayer","highPrecision","coverage","type","min","max","value","x","hexagon","extruded","getColor","H3HexagonLayer","CompositeLayer","shouldUpdateState","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","updateState","props","oldProps","dataChanged","updateTriggers","resolution","hasPentagon","iterable","data","index","setState","edgeLengthKM","UNITS","km","_updateVertices","context","viewport","state","centerHex","hex","latitude","longitude","pixelsPerMeter","distanceScales","centerLat","centerLng","centerX","centerY","projectFlat","map","p","worldPosition","renderLayers","_renderPolygonLayer","_renderColumnLayer","_getForwardProps","elevationScale","fp64","material","wireframe","stroked","filled","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","getFillColor","getElevation","getLineColor","getLineWidth","SubLayerClass","getSubLayerClass","forwardProps","getPolygon","getSubLayerProps","id","ColumnLayer","getPosition","diskResolution","radius","bind","layerName"],"mappings":"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","sourcesContent":["import {\n  h3ToGeoBoundary,\n  h3GetResolution,\n  h3ToGeo,\n  geoToH3,\n  h3IsPentagon,\n  h3Distance,\n  edgeLength,\n  UNITS\n} from 'h3-js';\nimport { CompositeLayer, createIterable } from 'kepler-outdated-deck.gl-core';\nimport { ColumnLayer, PolygonLayer } from 'kepler-outdated-deck.gl-layers';\n\n// There is a cost to updating the instanced geometries when using highPrecision: false\n// This constant defines the distance between two hexagons that leads to \"significant\n// distortion.\" Smaller value makes the column layer more sensitive to viewport change.\nconst UPDATE_THRESHOLD_KM = 10;\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nfunction h3ToPolygon(hexId) {\n  const vertices = h3ToGeoBoundary(hexId, true);\n  const refLng = vertices[0][0];\n  for (const pt of vertices) {\n    const deltaLng = pt[0] - refLng;\n    if (deltaLng > 180) {\n      pt[0] -= 360;\n    } else if (deltaLng < -180) {\n      pt[0] += 360;\n    }\n  }\n  return vertices;\n}\n\nconst defaultProps = Object.assign({}, PolygonLayer.defaultProps, {\n  highPrecision: false,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  extruded: true,\n  getColor: null\n});\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)\n    ) {\n      let resolution = -1;\n      let hasPentagon = false;\n      const {iterable, objectInfo} = createIterable(props.data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexId = props.getHexagon(object, objectInfo);\n        // Take the resolution of the first hex\n        resolution = resolution < 0 ? h3GetResolution(hexId) : resolution;\n        if (h3IsPentagon(hexId)) {\n          hasPentagon = true;\n          break;\n        }\n      }\n      this.setState({\n        resolution,\n        edgeLengthKM: resolution >= 0 ? edgeLength(resolution, UNITS.km) : 0,\n        hasPentagon,\n        vertices: null\n      });\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _shouldUseHighPrecision() {\n    const {resolution, hasPentagon} = this.state;\n    return this.props.highPrecision || hasPentagon || (resolution >= 0 && resolution <= 5);\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, edgeLengthKM, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex = geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (\n      centerHex === hex ||\n      (centerHex && h3Distance(centerHex, hex) * edgeLengthKM < UPDATE_THRESHOLD_KM)\n    ) {\n      return;\n    }\n\n    const {pixelsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToPolygon(hex);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];\n      worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];\n      return worldPosition;\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _getForwardProps() {\n    const {\n      elevationScale,\n      fp64,\n      material,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      // TODO - Deprecate getColor Prop in v8.0\n      getColor,\n      getFillColor,\n      getElevation,\n      getLineColor,\n      getLineWidth,\n      updateTriggers\n    } = this.props;\n\n    return {\n      elevationScale,\n      fp64,\n      extruded,\n      wireframe,\n      stroked,\n      filled,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      material,\n      getElevation,\n      getFillColor: getColor || getFillColor,\n      getLineColor,\n      getLineWidth,\n      updateTriggers: {\n        getFillColor: updateTriggers.getColor || updateTriggers.getFillColor,\n        getElevation: updateTriggers.getElevation,\n        getLineColor: updateTriggers.getLineColor,\n        getLineWidth: updateTriggers.getLineWidth\n      }\n    };\n  }\n\n  _renderPolygonLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', PolygonLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPolygon = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToPolygon(hexagonId);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {data, getHexagon, updateTriggers} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n    const forwardProps = this._getForwardProps();\n    forwardProps.updateTriggers.getPosition = updateTriggers.getHexagon;\n\n    return new SubLayerClass(\n      forwardProps,\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: forwardProps.updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"],"file":"h3-hexagon-layer.js"}