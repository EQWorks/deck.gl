{"version":3,"sources":["../../../src/h3-layers/h3-cluster-layer.js"],"names":["defaultProps","Object","assign","getHexagons","type","value","d","hexagons","PolygonLayer","H3ClusterLayer","CompositeLayer","updateState","props","oldProps","changeFlags","dataChanged","updateTriggers","data","polygons","iterable","objectInfo","object","index","multiPolygon","polygon","push","_obj","_idx","setState","getPickingInfo","info","getSubLayerAccessor","accessor","renderLayers","elevationScale","extruded","wireframe","filled","stroked","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","material","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","SubLayerClass","getSubLayerClass","getSubLayerProps","id","state","getPolygon","layerName"],"mappings":"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","sourcesContent":["import {h3SetToMultiPolygon} from 'h3-js';\n\nimport { CompositeLayer, createIterable } from 'kepler-outdated-deck.gl-core';\nimport { PolygonLayer } from 'kepler-outdated-deck.gl-layers';\n\nconst defaultProps = Object.assign(\n  {\n    getHexagons: {type: 'accessor', value: d => d.hexagons}\n  },\n  PolygonLayer.defaultProps\n);\n\nexport default class H3ClusterLayer extends CompositeLayer {\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons)\n    ) {\n      const {data, getHexagons} = props;\n      const polygons = [];\n\n      const {iterable, objectInfo} = createIterable(data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexagons = getHexagons(object, objectInfo);\n        const multiPolygon = h3SetToMultiPolygon(hexagons, true);\n\n        for (const polygon of multiPolygon) {\n          polygons.push({polygon, _obj: object, _idx: objectInfo.index});\n        }\n      }\n\n      this.setState({polygons});\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      object: info.object && info.object._obj,\n      index: info.object && info.object._idx\n    });\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor !== 'function') return accessor;\n\n    return (object, objectInfo) => {\n      return accessor(object._obj, objectInfo);\n    };\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      wireframe,\n      filled,\n      stroked,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64,\n      material,\n\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        filled,\n        wireframe,\n\n        extruded,\n        elevationScale,\n\n        stroked,\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels,\n        lineJointRounded,\n        lineMiterLimit,\n        lineDashJustified,\n\n        material,\n\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      },\n      this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers\n      }),\n      {\n        data: this.state.polygons,\n        getPolygon: d => d.polygon\n      }\n    );\n  }\n}\n\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';\n"],"file":"h3-cluster-layer.js"}