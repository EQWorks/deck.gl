{"version":3,"sources":["../../src/test-runner.js"],"names":["Deck","MapView","GL_VENDOR","DEFAULT_DECK_PROPS","Object","assign","defaultProps","id","width","height","style","position","left","top","views","useDevicePixels","debug","DEFAULT_TEST_OPTIONS","onTestStart","testCase","console","log","name","onTestPass","onTestFail","timeout","DEFAULT_TEST_CASE","props","onAfterRender","done","TestRunner","isRunning","_testCases","_testCaseData","isHeadless","Boolean","window","browserTestDriver_isHeadless","testOptions","testCases","Array","isArray","push","options","Promise","resolve","reject","deck","onWebGLInitialized","_onWebGLInitialized","bind","onLoad","_currentTestCase","then","promise","forEach","_runTest","catch","error","_fail","message","finally","finalize","key","_next","result","gl","vendorMasked","getParameter","ext","getExtension","vendorUnmasked","UNMASKED_VENDOR_WEBGL","gpuVendor","initTestCase","isDone","timeoutId","clearTimeout","assert","setTimeout","setProps","layers","layerManager","getLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global window, console */\n/* eslint-disable no-console */\nimport { Deck, MapView } from 'kepler-outdated-deck.gl-core';\n\nconst GL_VENDOR = 0x1f00;\n\nconst DEFAULT_DECK_PROPS = Object.assign({}, Deck.defaultProps, {\n  id: 'deckgl-render-test',\n  width: 800,\n  height: 450,\n  style: {position: 'absolute', left: '0px', top: '0px'},\n  views: [new MapView()],\n  useDevicePixels: false,\n  debug: true\n});\n\nconst DEFAULT_TEST_OPTIONS = {\n  // test lifecycle callback\n  onTestStart: testCase => console.log(`# ${testCase.name}`),\n  onTestPass: testCase => console.log(`ok ${testCase.name} passed`),\n  onTestFail: testCase => console.log(`not ok ${testCase.name} failed`),\n\n  // milliseconds to wait for each test case before aborting\n  timeout: 2000\n};\n\nconst DEFAULT_TEST_CASE = {\n  name: 'Unnamed test',\n  props: {},\n  onAfterRender: ({done}) => done()\n};\n\nexport default class TestRunner {\n  /**\n   * props\n   *   Deck props\n   */\n  constructor(props = {}) {\n    this.props = Object.assign({}, DEFAULT_DECK_PROPS, props);\n\n    this.isRunning = false;\n    this._testCases = [];\n    this._testCaseData = null;\n\n    this.isHeadless = Boolean(window.browserTestDriver_isHeadless);\n\n    this.testOptions = Object.assign({}, DEFAULT_TEST_OPTIONS);\n  }\n\n  /**\n   * Add testCase(s)\n   */\n  add(testCases) {\n    if (!Array.isArray(testCases)) {\n      testCases = [testCases];\n    }\n    for (const testCase of testCases) {\n      this._testCases.push(testCase);\n    }\n    return this;\n  }\n\n  /**\n   * Returns a promise that resolves when all the test cases are done\n   */\n  run(options = {}) {\n    Object.assign(this.testOptions, options);\n\n    return new Promise((resolve, reject) => {\n      this.deck = new Deck(\n        Object.assign({}, this.props, {\n          onWebGLInitialized: this._onWebGLInitialized.bind(this),\n          onLoad: resolve\n        })\n      );\n\n      this.isRunning = true;\n      this._currentTestCase = null;\n    })\n      .then(() => {\n        let promise = Promise.resolve();\n        // chain test case promises\n        this._testCases.forEach(testCase => {\n          promise = promise.then(() => this._runTest(testCase));\n        });\n        return promise;\n      })\n      .catch(error => {\n        this._fail({error: error.message});\n      })\n      .finally(() => {\n        this.deck.finalize();\n        this.deck = null;\n      });\n  }\n\n  /* Lifecycle methods for subclassing */\n\n  initTestCase(testCase) {\n    for (const key in DEFAULT_TEST_CASE) {\n      testCase[key] = testCase[key] || DEFAULT_TEST_CASE[key];\n    }\n    this.testOptions.onTestStart(testCase);\n  }\n\n  assert(testCase) {\n    this.onTestPass(testCase);\n    this._next();\n  }\n\n  /* Utilities */\n\n  _pass(result) {\n    this.testOptions.onTestPass(this._currentTestCase, result);\n  }\n\n  _fail(result) {\n    this.testOptions.onTestFail(this._currentTestCase, result);\n  }\n\n  /* Private Methods */\n\n  _onWebGLInitialized(gl) {\n    const vendorMasked = gl.getParameter(GL_VENDOR);\n    const ext = gl.getExtension('WEBGL_debug_renderer_info');\n    const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL_VENDOR);\n    this.gpuVendor = vendorUnmasked || vendorMasked;\n  }\n\n  _runTest(testCase) {\n    return new Promise((resolve, reject) => {\n      const {deck} = this;\n      this._currentTestCase = testCase;\n      this._next = resolve;\n\n      // normalize test case\n      this.initTestCase(testCase);\n\n      let isDone = false;\n      let timeoutId = null;\n      const done = () => {\n        if (!isDone) {\n          isDone = true;\n          window.clearTimeout(timeoutId);\n          this.assert(testCase);\n        }\n      };\n\n      timeoutId = window.setTimeout(done, testCase.timeout || this.testOptions.timeout);\n\n      deck.setProps(\n        Object.assign({}, this.props, testCase, {\n          onAfterRender: () => {\n            testCase.onAfterRender({\n              deck,\n              layers: deck.layerManager.getLayers(),\n              done\n            });\n          }\n        })\n      );\n    });\n  }\n}\n"],"file":"test-runner.js"}