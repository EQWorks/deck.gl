{"version":3,"sources":["../../src/generate-layer-tests.js"],"names":["experimental","count","defaultAssert","condition","comment","Error","generateLayerTests","Layer","sampleProps","assert","onBeforeUpdate","onAfterUpdate","runDefaultAsserts","layerName","wrapTestCaseTitle","title","testCases","props","updateProps","data","error","message","_propTypes","propTypes","_mergedDefaultProps","defaultProps","makeAltDataTestCases","push","propName","newTestCase","makeAltPropTestCase","_onAfterUpdate","params","layer","isComposite","subLayers","length","getModels","forEach","testCase","newProps","propDef","type","String","max","min","updateTriggers","originalData","Array","isArray","genIterableProps","Set","nonIterableProps","_","info","index"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { experimental } from 'kepler-outdated-deck.gl-core';\nconst {count} = experimental;\n\nfunction defaultAssert(condition, comment) {\n  if (!condition) {\n    throw new Error(comment);\n  }\n}\n\n// Automatically generate testLayer test cases\nexport function generateLayerTests({\n  Layer,\n  sampleProps = {},\n  assert = defaultAssert,\n  onBeforeUpdate,\n  onAfterUpdate = () => {},\n  runDefaultAsserts = true\n}) {\n  assert(Layer.layerName, 'Layer should have display name');\n\n  function wrapTestCaseTitle(title) {\n    return `${Layer.layerName}#${title}`;\n  }\n\n  const testCases = [\n    {\n      title: 'Empty props',\n      props: {}\n    },\n    {\n      title: 'Null data',\n      updateProps: {data: null}\n    },\n    {\n      title: 'Sample data',\n      updateProps: sampleProps\n    }\n  ];\n\n  try {\n    // Calling constructor for the first time resolves default props\n    // eslint-disable-next-line\n    new Layer({});\n  } catch (error) {\n    assert(false, `Construct ${Layer.layerName} throws: ${error.message}`);\n  }\n\n  const {_propTypes: propTypes, _mergedDefaultProps: defaultProps} = Layer;\n\n  // Test alternative data formats\n  for (const {title, props} of makeAltDataTestCases(sampleProps, propTypes)) {\n    testCases.push({\n      title,\n      updateProps: props\n    });\n  }\n\n  for (const propName in Layer.defaultProps) {\n    if (!(propName in sampleProps)) {\n      // Do not override user provided props - they may be layer-specific\n      const newTestCase = makeAltPropTestCase(propName, propTypes, defaultProps);\n      if (newTestCase) {\n        testCases.push({\n          title: newTestCase.title,\n          updateProps: newTestCase.props\n        });\n      }\n    }\n  }\n\n  const _onAfterUpdate = params => {\n    // User callback\n    onAfterUpdate(params);\n\n    // Default assert\n    if (runDefaultAsserts) {\n      if (params.layer.isComposite) {\n        if (count(params.layer.props.data)) {\n          assert(params.subLayers.length, 'Layer should have sublayers');\n        }\n      } else {\n        assert(params.layer.getModels().length, 'Layer should have models');\n      }\n    }\n  };\n\n  testCases.forEach(testCase => {\n    testCase.title = wrapTestCaseTitle(testCase.title);\n    testCase.onBeforeUpdate = onBeforeUpdate;\n    testCase.onAfterUpdate = _onAfterUpdate;\n  });\n\n  return testCases;\n}\n\nfunction makeAltPropTestCase(propName, propTypes, defaultProps) {\n  const newProps = {};\n  const propDef = propTypes[propName];\n  let title;\n\n  if (!propDef) {\n    return null;\n  }\n\n  switch (propDef.type) {\n    case 'boolean':\n      newProps[propName] = !defaultProps[propName];\n      title = String(newProps[propName]);\n      break;\n\n    case 'number':\n      if ('max' in propDef) {\n        newProps[propName] = propDef.max;\n      } else if ('min' in propDef) {\n        newProps[propName] = propDef.min;\n      } else {\n        newProps[propName] = defaultProps[propName] + 1;\n      }\n      title = String(newProps[propName]);\n      break;\n\n    case 'accessor':\n      if (typeof defaultProps[propName] === 'function') {\n        return null;\n      }\n      newProps[propName] = () => defaultProps[propName];\n      newProps.updateTriggers = {\n        [propName]: propName\n      };\n      title = `() => ${defaultProps[propName]}`;\n      break;\n\n    default:\n      return null;\n  }\n  return {title: `${propName}: ${title}`, props: newProps};\n}\n\nfunction makeAltDataTestCases(props, propTypes) {\n  const originalData = props.data;\n  if (!Array.isArray(originalData)) {\n    return [];\n  }\n  // data should support any iterable\n  const genIterableProps = {\n    data: new Set(originalData)\n  };\n  // data in non-iterable form\n  const nonIterableProps = {\n    data: {\n      length: originalData.length\n    }\n  };\n  for (const propName in props) {\n    if (propTypes[propName].type === 'accessor') {\n      nonIterableProps[propName] = (_, info) => props[propName](originalData[info.index], info);\n    }\n  }\n\n  return [\n    {\n      title: 'Generic iterable data',\n      props: genIterableProps\n    },\n    {\n      title: 'non-iterable data',\n      props: nonIterableProps\n    }\n  ];\n}\n"],"file":"generate-layer-tests.js"}