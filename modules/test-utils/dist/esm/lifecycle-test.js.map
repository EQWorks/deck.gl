{"version":3,"sources":["../../src/lifecycle-test.js"],"names":["LayerManager","MapView","DeckRenderer","makeSpy","gl","testViewport","makeViewport","width","height","viewState","longitude","latitude","zoom","defaultOnError","error","title","safelyCall","func","onError","e","testInitializeLayer","layer","viewport","layerManager","id","setLayers","testUpdateLayer","newProps","clone","testDrawLayer","uniforms","deckRenderer","renderLayers","viewports","layers","getLayers","activateViewport","testLayer","Layer","testCases","spies","initialProps","props","oldResourceCounts","getResourceCounts","runLayerTests","resourceCounts","resourceName","Error","resourceStats","luma","stats","get","Texture2D","count","Buffer","injectSpies","spyMap","functionName","Object","getPrototypeOf","combinedProps","i","length","testCase","updateProps","onBeforeUpdate","onAfterUpdate","assign","oldState","state","subLayers","isComposite","getSubLayers","subLayer","keys","forEach","k","reset"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { LayerManager, MapView, DeckRenderer } from 'kepler-outdated-deck.gl-core';\n\nimport {makeSpy} from '@probe.gl/test-utils';\nimport gl from './utils/setup-gl';\n\nconst testViewport = new MapView().makeViewport({\n  width: 100,\n  height: 100,\n  viewState: {longitude: 0, latitude: 0, zoom: 1}\n});\n\nfunction defaultOnError(error, title) {\n  if (error) {\n    throw error;\n  }\n}\n\nfunction safelyCall(title, func, onError) {\n  let error = null;\n  try {\n    func();\n  } catch (e) {\n    error = e;\n  }\n  onError(error, title);\n}\n\nexport function testInitializeLayer({layer, viewport = testViewport, onError = defaultOnError}) {\n  const layerManager = new LayerManager(gl, {viewport});\n\n  safelyCall(`initializing ${layer.id}`, () => layerManager.setLayers([layer]), onError);\n\n  return null;\n}\n\nexport function testUpdateLayer({\n  layer,\n  viewport = testViewport,\n  newProps,\n  onError = defaultOnError\n}) {\n  const layerManager = new LayerManager(gl, {viewport});\n\n  safelyCall(\n    `updating ${layer.id}`,\n    () => {\n      layerManager.setLayers([layer]);\n      layerManager.setLayers([layer.clone(newProps)]);\n    },\n    onError\n  );\n\n  return null;\n}\n\nexport function testDrawLayer({\n  layer,\n  viewport = testViewport,\n  uniforms = {},\n  onError = defaultOnError\n}) {\n  const layerManager = new LayerManager(gl, {viewport});\n  const deckRenderer = new DeckRenderer(gl);\n\n  safelyCall(\n    `drawing ${layer.id}`,\n    () => {\n      layerManager.setLayers([layer]);\n      deckRenderer.renderLayers({\n        viewports: [testViewport],\n        layers: layerManager.getLayers(),\n        activateViewport: layerManager.activateViewport\n      });\n    },\n    onError\n  );\n\n  return null;\n}\n\nexport function testLayer({\n  Layer,\n  viewport = testViewport,\n  testCases = [],\n  spies = [],\n  onError = defaultOnError\n}) {\n  // assert(Layer);\n\n  const layerManager = new LayerManager(gl, {viewport});\n  const deckRenderer = new DeckRenderer(gl);\n\n  const initialProps = testCases[0].props;\n  const layer = new Layer(initialProps);\n\n  const oldResourceCounts = getResourceCounts();\n\n  safelyCall(`initializing ${layer.id}`, () => layerManager.setLayers([layer]), onError);\n\n  runLayerTests(layerManager, deckRenderer, layer, testCases, spies, onError);\n\n  safelyCall(`finalizing ${layer.id}`, () => layerManager.setLayers([]), onError);\n\n  const resourceCounts = getResourceCounts();\n\n  for (const resourceName in resourceCounts) {\n    if (resourceCounts[resourceName] !== oldResourceCounts[resourceName]) {\n      onError(\n        new Error(\n          `${resourceCounts[resourceName] - oldResourceCounts[resourceName]} ${resourceName}s`\n        ),\n        `${layer.id} should delete all ${resourceName}s`\n      );\n    }\n  }\n}\n\nfunction getResourceCounts() {\n  /* global luma */\n  const resourceStats = luma.stats.get('Resource Counts');\n  return {\n    Texture2D: resourceStats.get('Texture2Ds Active').count,\n    Buffer: resourceStats.get('Buffers Active').count\n  };\n}\n\nfunction injectSpies(layer, spies) {\n  const spyMap = {};\n  if (spies) {\n    for (const functionName of spies) {\n      spyMap[functionName] = makeSpy(Object.getPrototypeOf(layer), functionName);\n    }\n  }\n  return spyMap;\n}\n\n/* eslint-disable max-params, no-loop-func */\nfunction runLayerTests(layerManager, deckRenderer, layer, testCases, spies, onError) {\n  let combinedProps = {};\n\n  // Run successive update tests\n  for (let i = 0; i < testCases.length; i++) {\n    const testCase = testCases[i];\n    const {props, updateProps, onBeforeUpdate, onAfterUpdate} = testCase;\n\n    spies = testCase.spies || spies;\n\n    // Test case can reset the props on every iteration\n    if (props) {\n      combinedProps = Object.assign({}, props);\n    }\n    // Test case can override with new props on every iteration\n    if (updateProps) {\n      Object.assign(combinedProps, updateProps);\n    }\n\n    // copy old state before update\n    const oldState = Object.assign({}, layer.state);\n\n    if (onBeforeUpdate) {\n      onBeforeUpdate({layer, testCase});\n    }\n\n    layer = layer.clone(combinedProps);\n    // Create a map of spies that the test case can inspect\n    const spyMap = injectSpies(layer, spies);\n\n    safelyCall(`updating ${layer.id}`, () => layerManager.setLayers([layer]), onError);\n\n    // call draw layer\n    safelyCall(\n      `drawing ${layer.id}`,\n      () =>\n        deckRenderer.renderLayers({\n          viewports: [testViewport],\n          layers: layerManager.getLayers(),\n          activateViewport: layerManager.activateViewport\n        }),\n      onError\n    );\n\n    // layer manager should handle match subLayer and tranfer state and props\n    // here we assume subLayer matches copy over the new props from a new subLayer\n    const subLayers = layer.isComposite ? layer.getSubLayers() : [];\n    const subLayer = subLayers.length && subLayers[0];\n\n    // assert on updated layer\n    if (onAfterUpdate) {\n      onAfterUpdate({testCase, layer, oldState, subLayers, subLayer, spies: spyMap});\n    }\n\n    // Remove spies\n    Object.keys(spyMap).forEach(k => spyMap[k].reset());\n  }\n}\n/* eslint-enable parameters, no-loop-func */\n"],"file":"lifecycle-test.js"}