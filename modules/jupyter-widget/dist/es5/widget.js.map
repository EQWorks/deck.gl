{"version":3,"sources":["../../src/widget.js"],"names":["mapboxgl","require","deckgl","deckglLayers","deckAggregationLayers","deckJson","MAPBOX_CSS_URL","DeckGLModel","DOMWidgetModel","defaults","_model_name","model_name","_model_module","model_module","_model_module_version","model_module_version","_view_name","view_name","_view_module","view_module","_view_module_version","view_module_version","serializers","MODULE_NAME","MODULE_VERSION","TICK_RATE_MILLISECONDS","DeckGLView","DOMWidgetView","render","modelId","model","model_id","listenTo","value_changed","width","height","get","el","initJSElements","bind","_onViewStateChange","viewState","deck","setProps","mapLayer","accessToken","Deck","canvas","onLoad","mapboxApiAccessToken","views","MapView","onViewStateChange","Map","container","interactive","style","json_input","parsedJSONInput","JSON","parse","jsonConverter","_JSONConverter","configuration","layers","results","convertJsonToDeckProps","props"],"mappings":"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","sourcesContent":["import {DOMWidgetModel, DOMWidgetView} from '@jupyter-widgets/base';\n\nimport {MODULE_NAME, MODULE_VERSION} from './version';\n\nimport {\n  createDeckScaffold,\n  loadCss,\n  hideMapboxCSSWarning,\n  setMapProps,\n  waitForElementToDisplay\n} from './utils';\n\nconst mapboxgl = require('mapbox-gl');\nconst deckgl = require('kepler-outdated-deck.gl-core');\nconst deckglLayers = require('kepler-outdated-deck.gl-layers');\nconst deckAggregationLayers = require('kepler-outdated-deck.gl-aggregation-layers');\nconst deckJson = require('kepler-outdated-deck.gl-json');\n\nconst MAPBOX_CSS_URL = 'https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.1/mapbox-gl.css';\n\nexport class DeckGLModel extends DOMWidgetModel {\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: DeckGLModel.model_name,\n      _model_module: DeckGLModel.model_module,\n      _model_module_version: DeckGLModel.model_module_version,\n      _view_name: DeckGLModel.view_name,\n      _view_module: DeckGLModel.view_module,\n      _view_module_version: DeckGLModel.view_module_version\n    };\n  }\n\n  static get serializers() {\n    return {...DOMWidgetModel.serializers};\n    // Add any extra serializers here\n  }\n\n  static get model_name() {\n    return 'DeckGLModel';\n  }\n  static get model_module() {\n    return MODULE_NAME;\n  }\n  static get model_module_version() {\n    return MODULE_VERSION;\n  }\n  static get view_name() {\n    return 'DeckGLView';\n  }\n  static get view_module() {\n    return MODULE_NAME;\n  }\n  static get view_module_version() {\n    return MODULE_VERSION;\n  }\n}\n\nconst TICK_RATE_MILLISECONDS = 100;\n\nexport class DeckGLView extends DOMWidgetView {\n  render() {\n    this.modelId = this.model.model_id;\n    super.render();\n    this.listenTo(this.model, 'change:json_input', this.value_changed);\n    loadCss(MAPBOX_CSS_URL);\n    const [width, height] = [this.model.get('width'), this.model.get('height')];\n    createDeckScaffold(this.el, this.modelId, width, height);\n    waitForElementToDisplay(\n      `#deck-map-wrapper-${this.modelId}`,\n      TICK_RATE_MILLISECONDS,\n      this.initJSElements.bind(this)\n    );\n  }\n\n  _onViewStateChange({viewState}) {\n    this.deck.setProps({viewState});\n    setMapProps(this.mapLayer, {viewState});\n  }\n\n  initJSElements() {\n    if (!this.deck) {\n      mapboxgl.accessToken = this.model.get('mapbox_key');\n      this.deck = new deckgl.Deck({\n        canvas: `deck-map-container-${this.modelId}`,\n        height: '100%',\n        width: '100%',\n        onLoad: this.value_changed.bind(this),\n        mapboxApiAccessToken: mapboxgl.accessToken,\n        views: [new deckgl.MapView()],\n        onViewStateChange: this._onViewStateChange.bind(this)\n      });\n    }\n\n    if (!this.mapLayer) {\n      this.mapLayer = new mapboxgl.Map({\n        container: `map-${this.modelId}`,\n        interactive: false,\n        style: null\n      });\n    }\n  }\n\n  value_changed() {\n    this.json_input = this.model.get('json_input');\n    const parsedJSONInput = JSON.parse(this.json_input);\n    this.initJSElements();\n    const jsonConverter = new deckJson._JSONConverter({\n      configuration: {\n        layers: {...deckglLayers, ...deckAggregationLayers}\n      }\n    });\n    const results = jsonConverter.convertJsonToDeckProps(parsedJSONInput);\n    this.deck.setProps(results);\n    hideMapboxCSSWarning();\n    setMapProps(this.mapLayer, this.deck.props);\n  }\n}\n"],"file":"widget.js"}