{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["DeckPicker","constructor","gl","pickingFBO","pickLayersPass","PickLayersPass","pixelRatio","layerFilter","pickingEvent","lastPickedInfo","index","layerId","info","setProps","props","useDevicePixels","pickObject","x","y","mode","radius","layers","viewports","activateViewport","depth","event","result","pickClosestObject","onViewportActive","pickObjects","width","height","pickVisibleObjects","getLastPickedObject","lastPickedLayerId","layer","id","find","l","coordinate","unproject","lngLat","Object","assign","color","object","updatePickingBuffer","Framebuffer","resize","canvas","deviceX","Math","round","deviceY","deviceRadius","deviceRect","getPickingRect","deviceWidth","deviceHeight","infos","affectedLayers","i","pickedColors","drawAndSamplePickingBuffer","redrawReason","pickInfo","pickedColor","copyPickingColors","clearPickingColor","processedPickInfos","callLayerPickingCallbacks","forEach","push","keys","restorePickingColors","emptyInfo","get","deviceLeft","deviceBottom","deviceRight","deviceTop","pickInfos","uniqueInfos","Map","pickedObjectIndex","picked","pickedLayer","has","set","Array","from","values","Number","isFinite","pickableLayers","filter","isPickable","length","effectProps","lightSources","render","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","valid","max","min","unhandledPickInfos","handled","onHover","Error"],"mappings":";;;;;;;;;AAoBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEe,MAAMA,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACd,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,cAAL,GAAsB,IAAIC,uBAAJ,CAAmBH,EAAnB,CAAtB;AACA,SAAKI,UAAL,GAAkB,IAAlB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,cAAL,GAAsB;AAEpBC,MAAAA,KAAK,EAAE,CAAC,CAFY;AAGpBC,MAAAA,OAAO,EAAE,IAHW;AAIpBC,MAAAA,IAAI,EAAE;AAJc,KAAtB;AAMD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAI,qBAAqBA,KAAzB,EAAgC;AAC9B,WAAKR,UAAL,GAAkB,4BAAcQ,KAAK,CAACC,eAApB,CAAlB;AACD;;AAED,QAAI,iBAAiBD,KAArB,EAA4B;AAC1B,WAAKP,WAAL,GAAmBO,KAAK,CAACP,WAAzB;AACD;;AACD,SAAKH,cAAL,CAAoBS,QAApB,CAA6B;AAC3BP,MAAAA,UAAU,EAAE,KAAKA,UADU;AAE3BC,MAAAA,WAAW,EAAE,KAAKA;AAFS,KAA7B;AAID;;AAGDS,EAAAA,UAAU,OAUP;AAAA,QAVQ;AACTC,MAAAA,CADS;AAETC,MAAAA,CAFS;AAGTC,MAAAA,IAHS;AAITC,MAAAA,MAAM,GAAG,CAJA;AAKTC,MAAAA,MALS;AAMTC,MAAAA,SANS;AAOTC,MAAAA,gBAPS;AAQTC,MAAAA,KAAK,GAAG,CARC;AASTC,MAAAA,KAAK,GAAG;AATC,KAUR;AAED,SAAKjB,YAAL,GAAoBiB,KAApB;AACA,UAAMC,MAAM,GAAG,KAAKC,iBAAL,CAAuB;AAEpCV,MAAAA,CAFoC;AAGpCC,MAAAA,CAHoC;AAIpCE,MAAAA,MAJoC;AAKpCC,MAAAA,MALoC;AAMpCF,MAAAA,IANoC;AAOpCK,MAAAA,KAPoC;AASpCF,MAAAA,SAToC;AAUpCM,MAAAA,gBAAgB,EAAEL;AAVkB,KAAvB,CAAf;AAcA,SAAKf,YAAL,GAAoB,IAApB;AACA,WAAOkB,MAAP;AACD;;AAGDG,EAAAA,WAAW,QAA6D;AAAA,QAA5D;AAACZ,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOY,MAAAA,KAAP;AAAcC,MAAAA,MAAd;AAAsBV,MAAAA,MAAtB;AAA8BC,MAAAA,SAA9B;AAAyCC,MAAAA;AAAzC,KAA4D;AACtE,WAAO,KAAKS,kBAAL,CAAwB;AAC7Bf,MAAAA,CAD6B;AAE7BC,MAAAA,CAF6B;AAG7BY,MAAAA,KAH6B;AAI7BC,MAAAA,MAJ6B;AAK7BV,MAAAA,MAL6B;AAM7BF,MAAAA,IAAI,EAAE,aANuB;AAO7BG,MAAAA,SAP6B;AAQ7BM,MAAAA,gBAAgB,EAAEL;AARW,KAAxB,CAAP;AAUD;;AAGDU,EAAAA,mBAAmB,QAAuE;AAAA,QAAtE;AAAChB,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOG,MAAAA,MAAP;AAAeC,MAAAA;AAAf,KAAsE;AAAA,QAA3Cb,cAA2C,uEAA1B,KAAKA,cAAL,CAAoBG,IAAM;AACxF,UAAMsB,iBAAiB,GAAGzB,cAAc,IAAIA,cAAc,CAAC0B,KAAjC,IAA0C1B,cAAc,CAAC0B,KAAf,CAAqBC,EAAzF;AACA,UAAMD,KAAK,GAAGD,iBAAiB,GAAGb,MAAM,CAACgB,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASF,iBAA1B,CAAH,GAAkD,IAAjF;AACA,UAAMK,UAAU,GAAGjB,SAAS,CAAC,CAAD,CAAT,IAAgBA,SAAS,CAAC,CAAD,CAAT,CAAakB,SAAb,CAAuB,CAACvB,CAAD,EAAIC,CAAJ,CAAvB,CAAnC;AAEA,UAAMN,IAAI,GAAG;AACXK,MAAAA,CADW;AAEXC,MAAAA,CAFW;AAGXqB,MAAAA,UAHW;AAKXE,MAAAA,MAAM,EAAEF,UALG;AAMXJ,MAAAA;AANW,KAAb;;AASA,QAAIA,KAAJ,EAAW;AACT,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlC,cAAlB,EAAkCG,IAAlC,CAAP;AACD;;AACD,WAAO8B,MAAM,CAACC,MAAP,CAAc/B,IAAd,EAAoB;AAACgC,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,MAAM,EAAE,IAAtB;AAA4BnC,MAAAA,KAAK,EAAE,CAAC;AAApC,KAApB,CAAP;AACD;;AAGDoC,EAAAA,mBAAmB,GAAG;AACpB,UAAM;AAAC5C,MAAAA;AAAD,QAAO,IAAb;;AAEA,QAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkB,IAAI4C,+BAAJ,CAAgB7C,EAAhB,CAAlB;AACD;;AAED,SAAKC,UAAL,CAAgB6C,MAAhB,CAAuB;AAAClB,MAAAA,KAAK,EAAE5B,EAAE,CAAC+C,MAAH,CAAUnB,KAAlB;AAAyBC,MAAAA,MAAM,EAAE7B,EAAE,CAAC+C,MAAH,CAAUlB;AAA3C,KAAvB;AACA,WAAO,KAAK5B,UAAZ;AACD;;AAIDwB,EAAAA,iBAAiB,QAAuE;AAAA,QAAtE;AAACN,MAAAA,MAAD;AAASC,MAAAA,SAAT;AAAoBL,MAAAA,CAApB;AAAuBC,MAAAA,CAAvB;AAA0BE,MAAAA,MAA1B;AAAkCI,MAAAA,KAAK,GAAG,CAA1C;AAA6CL,MAAAA,IAA7C;AAAmDS,MAAAA;AAAnD,KAAsE;AACtF,SAAKkB,mBAAL;AAGA,UAAMxC,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAM4C,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWnC,CAAC,GAAGX,UAAf,CAAhB;AACA,UAAM+C,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAW,KAAKlD,EAAL,CAAQ+C,MAAR,CAAelB,MAAf,GAAwBb,CAAC,GAAGZ,UAAvC,CAAhB;AACA,UAAMgD,YAAY,GAAGH,IAAI,CAACC,KAAL,CAAWhC,MAAM,GAAGd,UAApB,CAArB;AACA,UAAM;AAACwB,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkB,KAAK5B,UAA7B;AACA,UAAMoD,UAAU,GAAG,KAAKC,cAAL,CAAoB;AACrCN,MAAAA,OADqC;AAErCG,MAAAA,OAFqC;AAGrCC,MAAAA,YAHqC;AAIrCG,MAAAA,WAAW,EAAE3B,KAJwB;AAKrC4B,MAAAA,YAAY,EAAE3B;AALuB,KAApB,CAAnB;AAQA,QAAI4B,KAAJ;AACA,UAAMjC,MAAM,GAAG,EAAf;AACA,UAAMkC,cAAc,GAAG,EAAvB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,KAApB,EAA2BqC,CAAC,EAA5B,EAAgC;AAC9B,YAAMC,YAAY,GAChBP,UAAU,IACV,KAAKQ,0BAAL,CAAgC;AAC9B1C,QAAAA,MAD8B;AAE9BC,QAAAA,SAF8B;AAG9BM,QAAAA,gBAH8B;AAI9B2B,QAAAA,UAJ8B;AAK9BS,QAAAA,YAAY,EAAE7C;AALgB,OAAhC,CAFF;AAUA,YAAM8C,QAAQ,GAAG,mCAAiB;AAChCH,QAAAA,YADgC;AAEhCzC,QAAAA,MAFgC;AAGhC6B,QAAAA,OAHgC;AAIhCG,QAAAA,OAJgC;AAKhCC,QAAAA,YALgC;AAMhCC,QAAAA;AANgC,OAAjB,CAAjB;;AAWA,UAAIU,QAAQ,CAACC,WAAT,IAAwBL,CAAC,GAAG,CAAJ,GAAQrC,KAApC,EAA2C;AACzC,cAAMb,OAAO,GAAGsD,QAAQ,CAACC,WAAT,CAAqB,CAArB,IAA0B,CAA1C;;AACA,YAAI,CAACN,cAAc,CAACjD,OAAD,CAAnB,EAA8B;AAE5BiD,UAAAA,cAAc,CAACjD,OAAD,CAAd,GAA0BU,MAAM,CAACV,OAAD,CAAN,CAAgBwD,iBAAhB,EAA1B;AACD;;AACD9C,QAAAA,MAAM,CAACV,OAAD,CAAN,CAAgByD,iBAAhB,CAAkCH,QAAQ,CAACC,WAA3C;AACD;;AAGDP,MAAAA,KAAK,GAAG,+BAAgB;AACtBM,QAAAA,QADsB;AAEtBxD,QAAAA,cAAc,EAAE,KAAKA,cAFC;AAGtBU,QAAAA,IAHsB;AAItBE,QAAAA,MAJsB;AAKtBC,QAAAA,SALsB;AAMtBL,QAAAA,CANsB;AAOtBC,QAAAA,CAPsB;AAQtBgC,QAAAA,OARsB;AAStBG,QAAAA,OATsB;AAUtB/C,QAAAA;AAVsB,OAAhB,CAAR;AAaA,YAAM+D,kBAAkB,GAAG,KAAKC,yBAAL,CAA+BX,KAA/B,EAAsCxC,IAAtC,CAA3B;;AAEA,UAAIkD,kBAAJ,EAAwB;AACtBA,QAAAA,kBAAkB,CAACE,OAAnB,CAA2B3D,IAAI,IAAIc,MAAM,CAAC8C,IAAP,CAAY5D,IAAZ,CAAnC;AACD;;AAGD,UAAI,CAACqD,QAAQ,CAACC,WAAd,EAA2B;AACzB;AACD;AACF;;AAGDxB,IAAAA,MAAM,CAAC+B,IAAP,CAAYb,cAAZ,EAA4BW,OAA5B,CAAoC5D,OAAO,IACzCU,MAAM,CAACV,OAAD,CAAN,CAAgB+D,oBAAhB,CAAqCd,cAAc,CAACjD,OAAD,CAAnD,CADF;AAIA,WAAO;AAACe,MAAAA,MAAD;AAASiD,MAAAA,SAAS,EAAEhB,KAAK,IAAIA,KAAK,CAACiB,GAAN,CAAU,IAAV;AAA7B,KAAP;AACD;;AAGD5C,EAAAA,kBAAkB,QAAmE;AAAA,QAAlE;AAACX,MAAAA,MAAD;AAASC,MAAAA,SAAT;AAAoBL,MAAAA,CAApB;AAAuBC,MAAAA,CAAvB;AAA0BY,MAAAA,KAA1B;AAAiCC,MAAAA,MAAjC;AAAyCZ,MAAAA,IAAzC;AAA+CS,MAAAA;AAA/C,KAAkE;AACnF,SAAKkB,mBAAL;AAGA,UAAMxC,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAMuE,UAAU,GAAG1B,IAAI,CAACC,KAAL,CAAWnC,CAAC,GAAGX,UAAf,CAAnB;AACA,UAAMwE,YAAY,GAAG3B,IAAI,CAACC,KAAL,CAAW,KAAKlD,EAAL,CAAQ+C,MAAR,CAAelB,MAAf,GAAwBb,CAAC,GAAGZ,UAAvC,CAArB;AACA,UAAMyE,WAAW,GAAG5B,IAAI,CAACC,KAAL,CAAW,CAACnC,CAAC,GAAGa,KAAL,IAAcxB,UAAzB,CAApB;AACA,UAAM0E,SAAS,GAAG7B,IAAI,CAACC,KAAL,CAAW,KAAKlD,EAAL,CAAQ+C,MAAR,CAAelB,MAAf,GAAwB,CAACb,CAAC,GAAGa,MAAL,IAAezB,UAAlD,CAAlB;AAEA,UAAMiD,UAAU,GAAG;AACjBtC,MAAAA,CAAC,EAAE4D,UADc;AAEjB3D,MAAAA,CAAC,EAAE8D,SAFc;AAGjBlD,MAAAA,KAAK,EAAEiD,WAAW,GAAGF,UAHJ;AAIjB9C,MAAAA,MAAM,EAAE+C,YAAY,GAAGE;AAJN,KAAnB;AAOA,UAAMlB,YAAY,GAAG,KAAKC,0BAAL,CAAgC;AACnD1C,MAAAA,MADmD;AAEnDC,MAAAA,SAFmD;AAGnDM,MAAAA,gBAHmD;AAInD2B,MAAAA,UAJmD;AAKnDS,MAAAA,YAAY,EAAE7C;AALqC,KAAhC,CAArB;AAQA,UAAM8D,SAAS,GAAG,mCAAiB;AAACnB,MAAAA,YAAD;AAAezC,MAAAA;AAAf,KAAjB,CAAlB;AAGA,UAAM6D,WAAW,GAAG,IAAIC,GAAJ,EAApB;AAEAF,IAAAA,SAAS,CAACV,OAAV,CAAkBN,QAAQ,IAAI;AAC5B,UAAIrD,IAAI,GAAG;AACTgC,QAAAA,KAAK,EAAEqB,QAAQ,CAACC,WADP;AAET/B,QAAAA,KAAK,EAAE,IAFE;AAGTzB,QAAAA,KAAK,EAAEuD,QAAQ,CAACmB,iBAHP;AAITC,QAAAA,MAAM,EAAE,IAJC;AAKTpE,QAAAA,CALS;AAMTC,QAAAA,CANS;AAOTY,QAAAA,KAPS;AAQTC,QAAAA,MARS;AASTzB,QAAAA;AATS,OAAX;AAYAM,MAAAA,IAAI,GAAG,mCAAoB;AAACuB,QAAAA,KAAK,EAAE8B,QAAQ,CAACqB,WAAjB;AAA8B1E,QAAAA,IAA9B;AAAoCO,QAAAA;AAApC,OAApB,CAAP;;AACA,UAAI,CAAC+D,WAAW,CAACK,GAAZ,CAAgB3E,IAAI,CAACiC,MAArB,CAAL,EAAmC;AACjCqC,QAAAA,WAAW,CAACM,GAAZ,CAAgB5E,IAAI,CAACiC,MAArB,EAA6BjC,IAA7B;AACD;AACF,KAjBD;AAmBA,WAAO6E,KAAK,CAACC,IAAN,CAAWR,WAAW,CAACS,MAAZ,EAAX,CAAP;AACD;;AAGD5B,EAAAA,0BAA0B,QAAkE;AAAA,QAAjE;AAAC1C,MAAAA,MAAD;AAASC,MAAAA,SAAT;AAAoBM,MAAAA,gBAApB;AAAsC2B,MAAAA,UAAtC;AAAkDS,MAAAA;AAAlD,KAAiE;AAC1F,yBAAOT,UAAP;AACA,yBAAOqC,MAAM,CAACC,QAAP,CAAgBtC,UAAU,CAACzB,KAA3B,KAAqCyB,UAAU,CAACzB,KAAX,GAAmB,CAA/D,EAAkE,qBAAlE;AACA,yBAAO8D,MAAM,CAACC,QAAP,CAAgBtC,UAAU,CAACxB,MAA3B,KAAsCwB,UAAU,CAACxB,MAAX,GAAoB,CAAjE,EAAoE,sBAApE;AAEA,UAAM+D,cAAc,GAAGzE,MAAM,CAAC0E,MAAP,CAAc5D,KAAK,IAAIA,KAAK,CAAC6D,UAAN,EAAvB,CAAvB;;AACA,QAAIF,cAAc,CAACG,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,aAAO,IAAP;AACD;;AAED,UAAM9F,UAAU,GAAG,KAAKA,UAAxB;AAGA,UAAM+F,WAAW,GAAG;AAACC,MAAAA,YAAY,EAAE;AAAf,KAApB;AAEA,SAAK/F,cAAL,CAAoBgG,MAApB,CAA2B;AACzB/E,MAAAA,MADyB;AAEzBC,MAAAA,SAFyB;AAGzBM,MAAAA,gBAHyB;AAIzBzB,MAAAA,UAJyB;AAKzBoD,MAAAA,UALyB;AAMzBS,MAAAA,YANyB;AAOzBkC,MAAAA;AAPyB,KAA3B;AAYA,UAAM;AAACjF,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOY,MAAAA,KAAP;AAAcC,MAAAA;AAAd,QAAwBwB,UAA9B;AACA,UAAMO,YAAY,GAAG,IAAIuC,UAAJ,CAAevE,KAAK,GAAGC,MAAR,GAAiB,CAAhC,CAArB;AACA,+CAAkB5B,UAAlB,EAA8B;AAC5BmG,MAAAA,OAAO,EAAErF,CADmB;AAE5BsF,MAAAA,OAAO,EAAErF,CAFmB;AAG5BsF,MAAAA,WAAW,EAAE1E,KAHe;AAI5B2E,MAAAA,YAAY,EAAE1E,MAJc;AAK5B2E,MAAAA,MAAM,EAAE5C;AALoB,KAA9B;AAOA,WAAOA,YAAP;AACD;;AAIDN,EAAAA,cAAc,QAA8D;AAAA,QAA7D;AAACN,MAAAA,OAAD;AAAUG,MAAAA,OAAV;AAAmBC,MAAAA,YAAnB;AAAiCG,MAAAA,WAAjC;AAA8CC,MAAAA;AAA9C,KAA6D;AAC1E,UAAMiD,KAAK,GAAGzD,OAAO,IAAI,CAAX,IAAgBG,OAAO,IAAI,CAA3B,IAAgCH,OAAO,GAAGO,WAA1C,IAAyDJ,OAAO,GAAGK,YAAjF;;AAGA,QAAI,CAACiD,KAAL,EAAY;AACV,aAAO,IAAP;AACD;;AAGD,UAAM1F,CAAC,GAAGkC,IAAI,CAACyD,GAAL,CAAS,CAAT,EAAY1D,OAAO,GAAGI,YAAtB,CAAV;AACA,UAAMpC,CAAC,GAAGiC,IAAI,CAACyD,GAAL,CAAS,CAAT,EAAYvD,OAAO,GAAGC,YAAtB,CAAV;AACA,UAAMxB,KAAK,GAAGqB,IAAI,CAAC0D,GAAL,CAASpD,WAAT,EAAsBP,OAAO,GAAGI,YAAhC,IAAgDrC,CAAhD,GAAoD,CAAlE;AACA,UAAMc,MAAM,GAAGoB,IAAI,CAAC0D,GAAL,CAASnD,YAAT,EAAuBL,OAAO,GAAGC,YAAjC,IAAiDpC,CAAjD,GAAqD,CAApE;AAEA,WAAO;AAACD,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOY,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAP;AACD;;AAYDuC,EAAAA,yBAAyB,CAACX,KAAD,EAAQxC,IAAR,EAAc;AACrC,UAAM2F,kBAAkB,GAAG,EAA3B;AACA,UAAMtG,YAAY,GAAG,KAAKA,YAA1B;AAEAmD,IAAAA,KAAK,CAACY,OAAN,CAAc3D,IAAI,IAAI;AACpB,UAAI,CAACA,IAAI,CAACuB,KAAV,EAAiB;AACf;AACD;;AAED,UAAI4E,OAAO,GAAG,KAAd;;AACA,cAAQ5F,IAAR;AACE,aAAK,OAAL;AACE4F,UAAAA,OAAO,GAAGnG,IAAI,CAACuB,KAAL,CAAW6E,OAAX,CAAmBpG,IAAnB,EAAyBJ,YAAzB,CAAV;AACA;;AACF,aAAK,OAAL;AACE;;AACF;AACE,gBAAM,IAAIyG,KAAJ,CAAU,mBAAV,CAAN;AAPJ;;AAUA,UAAI,CAACF,OAAL,EAAc;AACZD,QAAAA,kBAAkB,CAACtC,IAAnB,CAAwB5D,IAAxB;AACD;AACF,KAnBD;AAqBA,WAAOkG,kBAAP;AACD;;AAzV6B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { Framebuffer, readPixelsToArray } from 'kepler-outdated-luma.gl-core';\nimport getPixelRatio from '../utils/get-pixel-ratio';\nimport assert from '../utils/assert';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, getLayerPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.pixelRatio = null;\n    this.layerFilter = null;\n    this.pickingEvent = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('useDevicePixels' in props) {\n      this.pixelRatio = getPixelRatio(props.useDevicePixels);\n    }\n\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n    this.pickLayersPass.setProps({\n      pixelRatio: this.pixelRatio,\n      layerFilter: this.layerFilter\n    });\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({\n    x,\n    y,\n    mode,\n    radius = 0,\n    layers,\n    viewports,\n    activateViewport,\n    depth = 1,\n    event = null\n  }) {\n    // Allow layers to access the event\n    this.pickingEvent = event;\n    const result = this.pickClosestObject({\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      depth,\n      // Injected params\n      viewports,\n      onViewportActive: activateViewport\n    });\n\n    // Clear the current event\n    this.pickingEvent = null;\n    return result;\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layers, viewports, activateViewport}) {\n    return this.pickVisibleObjects({\n      x,\n      y,\n      width,\n      height,\n      layers,\n      mode: 'pickObjects',\n      viewports,\n      onViewportActive: activateViewport\n    });\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  updatePickingBuffer() {\n    const {gl} = this;\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.pickingFBO;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements\n  pickClosestObject({layers, viewports, x, y, radius, depth = 1, mode, onViewportActive}) {\n    this.updatePickingBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = this.pixelRatio;\n    const deviceX = Math.round(x * pixelRatio);\n    const deviceY = Math.round(this.gl.canvas.height - y * pixelRatio);\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this.getPickingRect({\n      deviceX,\n      deviceY,\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this.drawAndSamplePickingBuffer({\n          layers,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX,\n        deviceY,\n        deviceRadius,\n        deviceRect\n      });\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        if (!affectedLayers[layerId]) {\n          // backup original colors\n          affectedLayers[layerId] = layers[layerId].copyPickingColors();\n        }\n        layers[layerId].clearPickingColor(pickInfo.pickedColor);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        deviceX,\n        deviceY,\n        pixelRatio\n      });\n\n      const processedPickInfos = this.callLayerPickingCallbacks(infos, mode);\n\n      if (processedPickInfos) {\n        processedPickInfos.forEach(info => result.push(info));\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    Object.keys(affectedLayers).forEach(layerId =>\n      layers[layerId].restorePickingColors(affectedLayers[layerId])\n    );\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  pickVisibleObjects({layers, viewports, x, y, width, height, mode, onViewportActive}) {\n    this.updatePickingBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = this.pixelRatio;\n    const deviceLeft = Math.round(x * pixelRatio);\n    const deviceBottom = Math.round(this.gl.canvas.height - y * pixelRatio);\n    const deviceRight = Math.round((x + width) * pixelRatio);\n    const deviceTop = Math.round(this.gl.canvas.height - (y + height) * pixelRatio);\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceTop,\n      width: deviceRight - deviceLeft,\n      height: deviceBottom - deviceTop\n    };\n\n    const pickedColors = this.drawAndSamplePickingBuffer({\n      layers,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    pickInfos.forEach(pickInfo => {\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    });\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  drawAndSamplePickingBuffer({layers, viewports, onViewportActive, deviceRect, redrawReason}) {\n    assert(deviceRect);\n    assert(Number.isFinite(deviceRect.width) && deviceRect.width > 0, '`width` must be > 0');\n    assert(Number.isFinite(deviceRect.height) && deviceRect.height > 0, '`height` must be > 0');\n\n    const pickableLayers = layers.filter(layer => layer.isPickable());\n    if (pickableLayers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = this.pickingFBO;\n    // turn off lighting by adding empty light source object\n    // lights shader module relies on the `lightSources` to turn on/off lighting\n    const effectProps = {lightSources: {}};\n\n    this.pickLayersPass.render({\n      layers,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      redrawReason,\n      effectProps\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new Uint8Array(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    const valid = deviceX >= 0 && deviceY >= 0 && deviceX < deviceWidth && deviceY < deviceHeight;\n\n    // x, y out of bounds.\n    if (!valid) {\n      return null;\n    }\n\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius) - x + 1;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius) - y + 1;\n\n    return {x, y, width, height};\n  }\n\n  // Per-layer event handlers (e.g. onClick, onHover) are provided by the\n  // user and out of deck.gl's control. It's very much possible that\n  // the user calls React lifecycle methods in these function, such as\n  // ReactComponent.setState(). React lifecycle methods sometimes induce\n  // a re-render and re-generation of props of deck.gl and its layers,\n  // which invalidates all layers currently passed to this very function.\n\n  // Therefore, per-layer event handlers must be invoked at the end\n  // of the picking operation. NO operation that relies on the states of current\n  // layers should be called after this code.\n  callLayerPickingCallbacks(infos, mode) {\n    const unhandledPickInfos = [];\n    const pickingEvent = this.pickingEvent;\n\n    infos.forEach(info => {\n      if (!info.layer) {\n        return;\n      }\n\n      let handled = false;\n      switch (mode) {\n        case 'hover':\n          handled = info.layer.onHover(info, pickingEvent);\n          break;\n        case 'query':\n          break;\n        default:\n          throw new Error('unknown pick type');\n      }\n\n      if (!handled) {\n        unhandledPickInfos.push(info);\n      }\n    });\n\n    return unhandledPickInfos;\n  }\n}\n"],"file":"deck-picker.js"}