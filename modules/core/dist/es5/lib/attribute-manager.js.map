{"version":3,"sources":["../../../src/lib/attribute-manager.js"],"names":["LOG_START_END_PRIORITY","LOG_DETAIL_PRIORITY","noop","logFunctions","savedMessages","timeStart","onLog","level","message","log","onUpdateStart","numInstances","Date","onUpdate","push","onUpdateEnd","id","timeMs","Math","round","time","group","collapsed","groupEnd","AttributeManager","setDefaultLogFunctions","undefined","constructor","gl","stats","attributes","updateTriggers","accessors","needsRedraw","userData","attributeTransitionManager","AttributeTransitionManager","Object","seal","finalize","attributeName","delete","getNeedsRedraw","opts","clearRedrawFlags","redraw","setNeedsRedraw","add","updaters","_add","addInstanced","instanced","remove","attributeNameArray","i","length","name","invalidate","triggerName","dataRange","invalidatedAttributes","_invalidateTrigger","invalidateAll","setNeedsUpdate","update","data","bufferLayout","transitions","props","buffers","context","updated","get","attribute","setExternalBuffer","setGenericValue","getAccessor","needsUpdate","_updateAttribute","timeEnd","updateTransition","timestamp","transitionUpdated","setCurrentTime","getAttributes","getChangedAttributes","clearChangedFlags","changedAttributes","assign","hasAttribute","getAccessors","extraProps","warn","newAttributes","newAttribute","_createAttribute","_mapUpdateTriggersToAttributes","constant","isIndexed","elements","size","value","divisor","Attribute","triggers","getUpdateTriggers","forEach","keys","join","allocate","now","updateBuffer"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable guard-for-in */\nimport Attribute from './attribute';\nimport log from '../utils/log';\n\nimport AttributeTransitionManager from './attribute-transition-manager';\n\nconst LOG_START_END_PRIORITY = 2;\nconst LOG_DETAIL_PRIORITY = 3;\n\nfunction noop() {}\n\n// Default loggers\nconst logFunctions = {\n  savedMessages: null,\n  timeStart: null,\n  onLog: ({level, message}) => {\n    log.log(level, message)();\n  },\n  onUpdateStart: ({level, numInstances}) => {\n    logFunctions.savedMessages = [];\n    logFunctions.timeStart = new Date();\n  },\n  onUpdate: ({level, message}) => {\n    if (logFunctions.savedMessages) {\n      logFunctions.savedMessages.push(message);\n    }\n  },\n  onUpdateEnd: ({level, id, numInstances}) => {\n    const timeMs = Math.round(new Date() - logFunctions.timeStart);\n    const time = `${timeMs}ms`;\n    log.group(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`, {\n      collapsed: true\n    })();\n    for (const message of logFunctions.savedMessages) {\n      log.log(level, message)();\n    }\n    log.groupEnd(level, `Updated attributes for ${numInstances} instances in ${id} in ${time}`)();\n    logFunctions.savedMessages = null;\n  }\n};\n\nexport default class AttributeManager {\n  /**\n   * Sets log functions to help trace or time attribute updates.\n   * Default logging uses deck logger.\n   *\n   * `onLog` is called for each attribute.\n   *\n   * To enable detailed control of timming and e.g. hierarchical logging,\n   * hooks are also provided for update start and end.\n   *\n   * @param {Object} [opts]\n   * @param {String} [onLog=] - called to print\n   * @param {String} [onUpdateStart=] - called before update() starts\n   * @param {String} [onUpdateEnd=] - called after update() ends\n   */\n  static setDefaultLogFunctions({onLog, onUpdateStart, onUpdate, onUpdateEnd} = {}) {\n    if (onLog !== undefined) {\n      logFunctions.onLog = onLog || noop;\n    }\n    if (onUpdateStart !== undefined) {\n      logFunctions.onUpdateStart = onUpdateStart || noop;\n    }\n    if (onUpdate !== undefined) {\n      logFunctions.onUpdate = onUpdate || noop;\n    }\n    if (onUpdateEnd !== undefined) {\n      logFunctions.onUpdateEnd = onUpdateEnd || noop;\n    }\n  }\n\n  /**\n   * @classdesc\n   * Automated attribute generation and management. Suitable when a set of\n   * vertex shader attributes are generated by iteration over a data array,\n   * and updates to these attributes are needed either when the data itself\n   * changes, or when other data relevant to the calculations change.\n   *\n   * - First the application registers descriptions of its dynamic vertex\n   *   attributes using AttributeManager.add().\n   * - Then, when any change that affects attributes is detected by the\n   *   application, the app will call AttributeManager.invalidate().\n   * - Finally before it renders, it calls AttributeManager.update() to\n   *   ensure that attributes are automatically rebuilt if anything has been\n   *   invalidated.\n   *\n   * The application provided update functions describe how attributes\n   * should be updated from a data array and are expected to traverse\n   * that data array (or iterable) and fill in the attribute's typed array.\n   *\n   * Note that the attribute manager intentionally does not do advanced\n   * change detection, but instead makes it easy to build such detection\n   * by offering the ability to \"invalidate\" each attribute separately.\n   */\n  constructor(gl, {id = 'attribute-manager', stats} = {}) {\n    this.id = id;\n    this.gl = gl;\n\n    this.attributes = {};\n\n    this.updateTriggers = {};\n    this.accessors = {};\n    this.needsRedraw = true;\n\n    this.userData = {};\n    this.stats = stats;\n\n    this.attributeTransitionManager = new AttributeTransitionManager(gl, {\n      id: `${id}-transitions`\n    });\n\n    // For debugging sanity, prevent uninitialized members\n    Object.seal(this);\n  }\n\n  finalize() {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].delete();\n    }\n    this.attributeTransitionManager.finalize();\n  }\n\n  // Returns the redraw flag, optionally clearing it.\n  // Redraw flag will be set if any attributes attributes changed since\n  // flag was last cleared.\n  //\n  // @param {String} [clearRedrawFlags=false] - whether to clear the flag\n  // @return {false|String} - reason a redraw is needed.\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;\n    return redraw && this.id;\n  }\n\n  // Sets the redraw flag.\n  // @param {Boolean} redraw=true\n  // @return {AttributeManager} - for chaining\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = true;\n    return this;\n  }\n\n  // Adds attributes\n  add(attributes, updaters) {\n    this._add(attributes, updaters);\n  }\n\n  // Adds attributes\n  addInstanced(attributes, updaters) {\n    this._add(attributes, updaters, {instanced: 1});\n  }\n\n  /**\n   * Removes attributes\n   * Takes an array of attribute names and delete them from\n   * the attribute map if they exists\n   *\n   * @example\n   * attributeManager.remove(['position']);\n   *\n   * @param {Object} attributeNameArray - attribute name array (see above)\n   */\n  remove(attributeNameArray) {\n    for (let i = 0; i < attributeNameArray.length; i++) {\n      const name = attributeNameArray[i];\n      if (this.attributes[name] !== undefined) {\n        this.attributes[name].delete();\n        delete this.attributes[name];\n      }\n    }\n  }\n\n  // Marks an attribute for update\n  invalidate(triggerName, dataRange) {\n    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated attributes ${invalidatedAttributes} (${triggerName}) for ${this.id}`\n    });\n  }\n\n  invalidateAll(dataRange) {\n    for (const attributeName in this.attributes) {\n      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);\n    }\n    // For performance tuning\n    logFunctions.onLog({\n      level: LOG_DETAIL_PRIORITY,\n      message: `invalidated all attributes for ${this.id}`\n    });\n  }\n\n  // Ensure all attribute buffers are updated from props or data.\n  update({\n    data,\n    numInstances,\n    bufferLayout,\n    transitions,\n    props = {},\n    buffers = {},\n    context = {}\n  } = {}) {\n    // keep track of whether some attributes are updated\n    let updated = false;\n\n    logFunctions.onUpdateStart({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeStart();\n    }\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n\n      if (attribute.setExternalBuffer(buffers[attributeName], this.numInstances)) {\n        // Attribute is using external buffer from the props\n      } else if (attribute.setGenericValue(props[attribute.getAccessor()])) {\n        // Attribute is using generic value from the props\n      } else if (attribute.needsUpdate()) {\n        updated = true;\n        this._updateAttribute({\n          attribute,\n          numInstances,\n          bufferLayout,\n          data,\n          props,\n          context\n        });\n      }\n\n      this.needsRedraw |= attribute.needsRedraw();\n    }\n\n    if (updated) {\n      // Only initiate alloc/update (and logging) if actually needed\n      logFunctions.onUpdateEnd({level: LOG_START_END_PRIORITY, id: this.id, numInstances});\n    }\n\n    if (this.stats) {\n      this.stats.get('Update Attributes').timeEnd();\n    }\n\n    this.attributeTransitionManager.update({\n      attributes: this.attributes,\n      numInstances,\n      transitions\n    });\n  }\n\n  // Update attribute transition to the current timestamp\n  // Returns `true` if any transition is in progress\n  updateTransition(timestamp) {\n    const {attributeTransitionManager} = this;\n    const transitionUpdated = attributeTransitionManager.setCurrentTime(timestamp);\n    this.needsRedraw = this.needsRedraw || transitionUpdated;\n    return transitionUpdated;\n  }\n\n  /**\n   * Returns all attribute descriptors\n   * Note: Format matches luma.gl Model/Program.setAttributes()\n   * @return {Object} attributes - descriptors\n   */\n  getAttributes() {\n    return this.attributes;\n  }\n\n  /**\n   * Returns changed attribute descriptors\n   * This indicates which WebGLBuffers need to be updated\n   * @return {Object} attributes - descriptors\n   */\n  getChangedAttributes(opts = {clearChangedFlags: false}) {\n    const {attributes, attributeTransitionManager} = this;\n\n    const changedAttributes = Object.assign({}, attributeTransitionManager.getAttributes());\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {\n        changedAttributes[attributeName] = attribute;\n      }\n    }\n\n    return changedAttributes;\n  }\n\n  // PROTECTED METHODS - Only to be used by collaborating classes, not by apps\n\n  // Returns object containing all accessors as keys, with non-null values\n  // @return {Object} - accessors object\n  getAccessors() {\n    return this.updateTriggers;\n  }\n\n  // PRIVATE METHODS\n\n  // Used to register an attribute\n  _add(attributes, updaters, extraProps = {}) {\n    if (updaters) {\n      log.warn('AttributeManager.add({updaters}) - updater map no longer supported')();\n    }\n\n    const newAttributes = {};\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      // Initialize the attribute descriptor, with WebGL and metadata fields\n      const newAttribute = this._createAttribute(attributeName, attribute, extraProps);\n\n      newAttributes[attributeName] = newAttribute;\n    }\n\n    Object.assign(this.attributes, newAttributes);\n\n    this._mapUpdateTriggersToAttributes();\n  }\n  /* eslint-enable max-statements */\n\n  _createAttribute(name, attribute, extraProps) {\n    const props = {\n      id: name,\n      // Luma fields\n      constant: attribute.constant || false,\n      isIndexed: attribute.isIndexed || attribute.elements,\n      size: (attribute.elements && 1) || attribute.size,\n      value: attribute.value || null,\n      divisor: attribute.instanced || extraProps.instanced ? 1 : attribute.divisor\n    };\n\n    return new Attribute(this.gl, Object.assign({}, attribute, props));\n  }\n\n  // build updateTrigger name to attribute name mapping\n  _mapUpdateTriggersToAttributes() {\n    const triggers = {};\n\n    for (const attributeName in this.attributes) {\n      const attribute = this.attributes[attributeName];\n      attribute.getUpdateTriggers().forEach(triggerName => {\n        if (!triggers[triggerName]) {\n          triggers[triggerName] = [];\n        }\n        triggers[triggerName].push(attributeName);\n      });\n    }\n\n    this.updateTriggers = triggers;\n  }\n\n  _invalidateTrigger(triggerName, dataRange) {\n    const {attributes, updateTriggers} = this;\n    const invalidatedAttributes = updateTriggers[triggerName];\n\n    if (invalidatedAttributes) {\n      invalidatedAttributes.forEach(name => {\n        const attribute = attributes[name];\n        if (attribute) {\n          attribute.setNeedsUpdate(attribute.id, dataRange);\n        }\n      });\n    } else {\n      let message = `invalidating non-existent trigger ${triggerName} for ${this.id}\\n`;\n      message += `Valid triggers: ${Object.keys(attributes).join(', ')}`;\n      log.warn(message, invalidatedAttributes)();\n    }\n    return invalidatedAttributes;\n  }\n\n  _updateAttribute(opts) {\n    const {attribute, numInstances} = opts;\n\n    if (attribute.allocate(numInstances)) {\n      logFunctions.onUpdate({\n        level: LOG_DETAIL_PRIORITY,\n        message: `${attribute.id} allocated ${numInstances}`,\n        id: this.id\n      });\n    }\n\n    // Calls update on any buffers that need update\n    const timeStart = Date.now();\n\n    const updated = attribute.updateBuffer(opts);\n    if (updated) {\n      this.needsRedraw = true;\n\n      const timeMs = Math.round(Date.now() - timeStart);\n      logFunctions.onUpdate({\n        level: LOG_DETAIL_PRIORITY,\n        message: `${attribute.id} updated ${numInstances} in ${timeMs}ms`\n      });\n    }\n  }\n}\n"],"file":"attribute-manager.js"}