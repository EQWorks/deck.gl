{"version":3,"sources":["../../../src/lib/view-manager.js"],"names":["ViewManager","constructor","props","views","width","height","viewState","controllers","_viewports","_viewportMap","_isUpdating","_needsRedraw","_needsUpdate","_eventManager","eventManager","_eventCallbacks","onViewStateChange","onInteractiveStateChange","Object","seal","setProps","finalize","key","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","reason","updateViewStates","animationProps","viewId","controller","updateTransition","time","getViewports","rect","filter","viewport","containsPixel","getViews","viewMap","forEach","view","id","getView","viewOrViewId","find","getViewState","getViewStateId","filterViewState","getViewport","project","xyz","topLeft","viewports","i","length","contains","unproject","_setViews","_setViewState","_setSize","_update","_rebuildViewports","Number","isFinite","Boolean","map","Viewport","View","viewportInstance","viewsChanged","_diffViews","viewStateChanged","log","warn","_onViewStateChange","event","_createController","Controller","type","assign","bind","onStateChange","_updateController","controllerProps","x","y","oldControllers","makeViewport","_buildViewportMap","newViews","oldViews","some","_","equals"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nexport default class ViewManager {\n  constructor(props = {}) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      if (this.controllers[key]) {\n        this.controllers[key].finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  // Check if a redraw is needed\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Checks each viewport for transition updates\n  updateViewStates(animationProps = {}) {\n    if ('time' in animationProps) {\n      for (const viewId in this.controllers) {\n        const controller = this.controllers[viewId];\n        if (controller) {\n          controller.updateTransition(animationProps.time);\n        }\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  // Resolves a viewId string to a View, if already a View returns it.\n  getView(viewOrViewId) {\n    return typeof viewOrViewId === 'string'\n      ? this.views.find(view => view.id === viewOrViewId)\n      : viewOrViewId;\n  }\n\n  // Returns the viewState for a specific viewId. Matches the viewState by\n  // 1. view.viewStateId\n  // 2. view.id\n  // 3. root viewState\n  // then applies the view's filter if any\n  getViewState(viewId) {\n    const view = this.getView(viewId);\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, opts = {topLeft: true}) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.contains(xyz, opts)) {\n        return viewport.project(xyz, opts);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(xyz, opts)) {\n        return viewport.unproject(xyz);\n      }\n    }\n    return null;\n  }\n\n  setProps(props) {\n    if ('views' in props) {\n      this._setViews(props.views);\n    }\n\n    // TODO - support multiple view states\n    if ('viewState' in props) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    assert(Number.isFinite(width) && Number.isFinite(height));\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  _setViews(views) {\n    // DEPRECATED: Ensure any \"naked\" Viewports are wrapped in View instances\n    views = flatten(views, {filter: Boolean}).map(\n      view => (view instanceof Viewport ? new View({viewportInstance: view}) : view)\n    );\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('setting null viewState')();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _onViewStateChange(viewId, event) {\n    event.viewId = viewId;\n    this._eventCallbacks.onViewStateChange(event);\n  }\n\n  _createController(props) {\n    const Controller = props.type;\n\n    const controller = new Controller(\n      Object.assign(\n        {\n          eventManager: this._eventManager,\n          // Set an internal callback that calls the prop callback if provided\n          onViewStateChange: this._onViewStateChange.bind(this, props.id),\n          onStateChange: this._eventCallbacks.onInteractiveStateChange\n        },\n        props\n      )\n    );\n\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    if (view.controller) {\n      const controllerProps = Object.assign({}, view.controller, viewState, {\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      });\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (controller) {\n        controller.setProps(controllerProps);\n      } else {\n        controller = this._createController(controllerProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  _rebuildViewports() {\n    const {width, height, views} = this;\n\n    const oldControllers = this.controllers;\n    this.controllers = {};\n\n    this._viewports = views.map(view => {\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({width, height, viewState});\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(\n        view,\n        viewState,\n        viewport,\n        oldControllers[view.id]\n      );\n\n      return viewport;\n    });\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      if (oldControllers[id] && !this.controllers[id]) {\n        oldControllers[id].finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"],"file":"view-manager.js"}