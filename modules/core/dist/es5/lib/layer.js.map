{"version":3,"sources":["../../../src/lib/layer.js"],"names":["LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","dataTransform","compare","fetch","url","then","response","json","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","optional","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","coordinateOrigin","modelMatrix","wrapLongitude","parameters","uniforms","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","Component","toString","className","constructor","layerName","name","props","id","setState","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","setLayerNeedsUpdate","context","layerManager","setNeedsUpdate","String","getNeedsRedraw","opts","clearRedrawFlags","_getNeedsRedraw","needsUpdate","shouldUpdateState","_getUpdateParams","isPickable","getModels","models","model","getSingleModel","getAttributeManager","attributeManager","getCurrentLayer","layer","getFirstObject","object","project","xyz","viewport","worldPosition","x","y","z","pixelProjectionMatrix","length","unproject","xy","Array","isArray","projectPosition","projectFlat","lngLat","log","deprecated","unprojectFlat","use64bitProjection","fp64","LNGLAT_DEPRECATED","once","use64bitPositions","IDENTITY","screenToDevicePixels","screenPixels","devicePixelRatio","window","info","pickingEvent","nullPickingColor","encodePickingColor","i","target","decodePickingColor","color","Uint8Array","i1","i2","i3","index","initializeState","Error","oldProps","changeFlags","propsOrDataChanged","updateState","dataChanged","invalidateAll","finalizeState","delete","finalize","draw","getPickingInfo","mode","invalidateAttribute","diffReason","invalidate","updateAttributes","getNumInstances","bufferLayout","getBufferLayout","update","transitions","buffers","ignoreUnknownAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","len","_setModelAttributes","updateTransition","time","calculateInstancePickingColors","attribute","size","cacheSize","newPickingColorCache","set","pickingColor","subarray","shaderAttributes","excludeAttributes","userData","attributeName","getShaderAttributes","setAttributes","_clearInstancePickingColor","instancePickingColors","attributes","_clearPickingColor","pickingColors","clearPickingColor","copyPickingColors","colors","restorePickingColors","_initialize","_initState","propsChanged","viewportChanged","_updateState","program","_update","stateNeedsUpdate","updateParams","gl","error","isComposite","_renderLayers","_updateBaseUniforms","setInstanceCount","clearChangeFlags","resetOldProps","_finalize","drawLayer","moduleParameters","picking_uActive","setModuleParameters","animationProps","_setAnimationProps","offsets","polygonOffset","pickLayer","getChangeFlags","flags","updateTriggersChanged","keys","join","somethingChanged","printChangeFlags","diffProps","newProps","key","_activeUpdateTrigger","validateProps","updateModuleSettings","getOldProps","attributeManagerNeedsRedraw","_getAttributeManager","AttributeManager","stats","addInstanced","LayerState","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","_transferState","oldLayer","component","propName","Math","pow","setUniforms","uniformMap","is64bitEnabled"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\n/* global fetch */\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport GL from 'kepler-outdated-luma.gl-constants';\nimport { withParameters } from 'kepler-outdated-luma.gl-core';\nimport assert from '../utils/assert';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from 'viewport-mercator-project';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  dataTransform: {type: 'function', value: data => data, compare: false},\n  fetch: {\n    type: 'function',\n    value: url => fetch(url).then(response => response.json()),\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n\n  parameters: {},\n  uniforms: {},\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'color', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  setLayerNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    assert(Array.isArray(xyz));\n\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  // DEPRECATE: This does not handle offset modes\n  projectFlat(lngLat) {\n    log.deprecated('layer.projectFlat', 'layer.projectPosition')();\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  // DEPRECATE: This is not meaningful in offset modes\n  unprojectFlat(xy) {\n    log.deprecated('layer.unprojectFlat')();\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  use64bitProjection() {\n    if (this.props.fp64) {\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT_DEPRECATED) {\n        return true;\n      }\n      log.once(\n        0,\n        `Legacy 64-bit mode only works with coordinateSystem set to\n        COORDINATE_SYSTEM.LNGLAT_DEPRECATED. Rendering in 32-bit mode instead`\n      )();\n    }\n\n    return false;\n  }\n\n  use64bitPositions() {\n    return (\n      this.props.fp64 ||\n      this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT ||\n      this.props.coordinateSystem === COORDINATE_SYSTEM.IDENTITY\n    );\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    assert(i < 16777215, 'index out of picking color range');\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      attributeManager.invalidateAll();\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n    const bufferLayout = this.getBufferLayout(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      bufferLayout,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const models = this.getModels();\n\n    if (models.length > 0) {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      for (let i = 0, len = models.length; i < len; ++i) {\n        this._setModelAttributes(models[i], changedAttributes);\n      }\n    }\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition(this.context.time);\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n\n    if (value[0] === 1) {\n      // This can happen when data has changed, but the attribute value typed array\n      // has sufficient size and does not need to be re-allocated.\n      // This attribute is already populated, we do not have to recalculate it\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / size;\n\n    if (cacheSize < numInstances) {\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newPickingColorCache = new Uint8ClampedArray(numInstances * size);\n      newPickingColorCache.set(pickingColorCache);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < numInstances; i++) {\n        this.encodePickingColor(i, pickingColor);\n        newPickingColorCache[i * size + 0] = pickingColor[0];\n        newPickingColorCache[i * size + 1] = pickingColor[1];\n        newPickingColorCache[i * size + 2] = pickingColor[2];\n      }\n\n      pickingColorCache = newPickingColorCache;\n    }\n\n    // Copy the last calculated picking color sequence into the attribute\n    value.set(\n      numInstances < cacheSize\n        ? pickingColorCache.subarray(0, numInstances * size)\n        : pickingColorCache\n    );\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const shaderAttributes = {};\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    for (const attributeName in changedAttributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, changedAttributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  _clearInstancePickingColor(color) {\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n    const {value, size} = instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    value[i * size + 0] = 0;\n    value[i * size + 1] = 0;\n    value[i * size + 2] = 0;\n\n    // TODO: Optimize this to use sub-buffer update!\n    instancePickingColors.update({value});\n  }\n\n  // Sets all occurrences of the specified picking color to null picking color. Used for multi picking.\n  _clearPickingColor(color) {\n    const {pickingColors} = this.getAttributeManager().attributes;\n    const {value} = pickingColors;\n\n    for (let i = 0; i < value.length; i += 3) {\n      if (value[i + 0] === color[0] && value[i + 1] === color[1] && value[i + 2] === color[2]) {\n        value[i + 0] = 0;\n        value[i + 1] = 0;\n        value[i + 2] = 0;\n      }\n    }\n\n    // TODO: Optimize this to use sub-buffer update!\n    pickingColors.update({value});\n  }\n\n  // This method figures out if we use instance colors or not\n  // and calls _clearInstancePickingColor or _clearPickingColor\n  clearPickingColor(color) {\n    if (this.getAttributeManager().attributes.pickingColors) {\n      this._clearPickingColor(color);\n    } else {\n      this._clearInstancePickingColor(color);\n    }\n  }\n\n  copyPickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    return new Uint8ClampedArray(colors.value);\n  }\n\n  restorePickingColors(value) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    colors.update({value});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // Buffer layout describes how many attribute values are packed for each data object\n  // The default (null) is one value each object.\n  // Some data formats (e.g. paths, polygons) have various length. Their buffer layout\n  //  is in the form of [L0, L1, L2, ...]\n  getBufferLayout(props) {\n    props = props || this.props;\n\n    // First Check if bufferLayout is provided as an explicit value\n    if (props.bufferLayout !== undefined) {\n      return props.bufferLayout;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.bufferLayout !== undefined) {\n      return this.state.bufferLayout;\n    }\n\n    return null;\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({dataChanged: true, propsChanged: true, viewportChanged: true});\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this.updateAttributes(this.props);\n      this._updateBaseUniforms();\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    this.clearChangeFlags();\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Hack/ib - define a public luma function\n    const {animationProps} = this.context;\n    if (animationProps) {\n      for (const model of this.getModels()) {\n        model._setAnimationProps(animationProps);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n    if (flags.stateChanged && !changeFlags.stateChanged) {\n      changeFlags.stateChanged = flags.stateChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `stateChanged: ${flags.stateChanged} in ${this.id}`)();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged || flags.updateTriggersChanged || flags.propsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged ||\n      propsOrDataChanged ||\n      flags.viewportChanged ||\n      flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = attributeManager;\n\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setLayerNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity:\n        typeof this.props.opacity === 'function'\n          ? animationProps => Math.pow(this.props.opacity(animationProps), 1 / 2.2)\n          : Math.pow(this.props.opacity, 1 / 2.2)\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n\n  is64bitEnabled() {\n    log.deprecated('is64bitEnabled', 'use64bitProjection')();\n    return this.use64bitProjection();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}