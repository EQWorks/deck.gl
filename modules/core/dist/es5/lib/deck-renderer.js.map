{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["LOG_PRIORITY_DRAW","DeckRenderer","constructor","gl","pixelRatio","layerFilter","drawPickingColors","drawLayersPass","DrawLayersPass","pickLayersPass","PickLayersPass","renderCount","_needsRedraw","screenBuffer","offscreenBuffer","lastPostProcessEffect","setProps","props","useDevicePixels","renderLayers","layers","viewports","activateViewport","views","redrawReason","clearCanvas","effects","pass","stats","layerPass","effectProps","prepareEffects","onViewportActive","outputBuffer","Framebuffer","getDefaultFramebuffer","renderStats","render","postRender","log","priority","forEach","status","logRenderStats","needsRedraw","opts","clearRedrawFlags","redraw","finalize","delete","params","effect","Object","assign","prepare","PostProcessEffect","prepareRenderBuffers","resize","inputBuffer","target","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","message","get","add"],"mappings":"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","sourcesContent":["import log from '../utils/log';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport getPixelRatio from '../utils/get-pixel-ratio';\nimport PostProcessEffect from '../effects/post-process-effect';\nimport {Framebuffer} from '@luma.gl/core';\n\nconst LOG_PRIORITY_DRAW = 2;\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.pixelRatio = null;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n    this.screenBuffer = null;\n    this.offscreenBuffer = null;\n    this.lastPostProcessEffect = null;\n  }\n\n  setProps(props) {\n    if ('useDevicePixels' in props) {\n      this.pixelRatio = getPixelRatio(props.useDevicePixels);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n\n    const {pixelRatio, layerFilter} = this;\n\n    this.drawLayersPass.setProps({\n      pixelRatio,\n      layerFilter\n    });\n    this.pickLayersPass.setProps({\n      pixelRatio,\n      layerFilter\n    });\n  }\n\n  renderLayers({\n    layers,\n    viewports,\n    activateViewport,\n    views,\n    redrawReason = 'unknown reason',\n    clearCanvas = true,\n    effects = [],\n    pass,\n    stats\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const effectProps = this.prepareEffects({\n      layers,\n      viewports,\n      onViewportActive: activateViewport,\n      views,\n      effects\n    });\n    const outputBuffer = this.lastPostProcessEffect\n      ? this.screenBuffer\n      : Framebuffer.getDefaultFramebuffer(this.gl);\n\n    const renderStats = layerPass.render({\n      layers,\n      viewports,\n      views,\n      onViewportActive: activateViewport,\n      redrawReason,\n      clearCanvas,\n      effects,\n      effectProps,\n      outputBuffer\n    });\n\n    this.postRender(effects);\n\n    this.renderCount++;\n\n    if (log.priority >= LOG_PRIORITY_DRAW) {\n      renderStats.forEach(status => {\n        this.logRenderStats({status, pass, redrawReason, stats, renderStats});\n      });\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  finalize() {\n    if (this.screenBuffer) {\n      this.screenBuffer.delete();\n      this.screenBuffer = null;\n    }\n    if (this.offscreenBuffer) {\n      this.offscreenBuffer.delete();\n      this.offscreenBuffer = null;\n    }\n  }\n\n  // Private\n  prepareEffects(params) {\n    const {effects} = params;\n    const effectProps = {};\n    this.lastPostProcessEffect = null;\n\n    for (const effect of effects) {\n      Object.assign(effectProps, effect.prepare(this.gl, params));\n      if (effect instanceof PostProcessEffect) {\n        this.lastPostProcessEffect = effect;\n      }\n    }\n\n    if (this.lastPostProcessEffect) {\n      this.prepareRenderBuffers();\n    }\n\n    return effectProps;\n  }\n\n  prepareRenderBuffers() {\n    if (!this.screenBuffer) {\n      this.screenBuffer = new Framebuffer(this.gl);\n    }\n    this.screenBuffer.resize();\n\n    if (!this.offscreenBuffer) {\n      this.offscreenBuffer = new Framebuffer(this.gl);\n    }\n    this.offscreenBuffer.resize();\n  }\n\n  postRender(effects) {\n    let params = {inputBuffer: this.screenBuffer, outputBuffer: this.offscreenBuffer, target: null};\n    for (const effect of effects) {\n      if (effect instanceof PostProcessEffect) {\n        if (effect === this.lastPostProcessEffect) {\n          Object.assign(params, {target: Framebuffer.getDefaultFramebuffer(this.gl)});\n          params = effect.render(params);\n          break;\n        }\n        params = effect.render(params);\n      }\n    }\n  }\n\n  logRenderStats({renderStats, pass, redrawReason, stats}) {\n    const {totalCount, visibleCount, compositeCount, pickableCount} = renderStats;\n    const primitiveCount = totalCount - compositeCount;\n    const hiddenCount = primitiveCount - visibleCount;\n\n    let message = '';\n    message += `RENDER #${this.renderCount} \\\n${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} `;\n    if (log.priority > LOG_PRIORITY_DRAW) {\n      message += `\\\n(${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`;\n    }\n\n    log.log(LOG_PRIORITY_DRAW, message)();\n\n    if (stats) {\n      stats.get('Redraw Layers').add(visibleCount);\n    }\n  }\n}\n"],"file":"deck-renderer.js"}