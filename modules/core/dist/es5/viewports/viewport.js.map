{"version":3,"sources":["../../../src/viewports/viewport.js"],"names":["DEGREES_TO_RADIANS","Math","PI","IDENTITY","ZERO_VECTOR","DEFAULT_ZOOM","ERR_ARGUMENT","Viewport","constructor","opts","id","x","y","width","height","displayName","_initViewMatrix","_initProjectionMatrix","_initPixelMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","projectFlat","unprojectFlat","getMatrices","viewport","scale","projectionMatrix","viewMatrix","xyz","topLeft","worldPosition","coord","pixelProjectionMatrix","y2","length","targetZ","z","targetZWorld","distanceScales","pixelsPerMeter","pixelUnprojectionMatrix","X","Y","Z","Number","isFinite","metersPerPixel","isGeospatial","getDistanceScales","coordinateOrigin","longitude","latitude","highPrecision","modelMatrix","modelViewProjectionMatrix","viewProjectionMatrix","mat4","multiply","invert","matrices","Object","assign","containsPixel","getCameraPosition","cameraPosition","getCameraDirection","cameraDirection","getCameraUp","cameraUp","_addMetersToLngLat","lngLatZ","lng","lat","deltaLng","deltaLat","deltaZ","_metersToLngLatDelta","degreesPerPixel","_createProjectionMatrix","orthographic","fovyRadians","aspect","focalDistance","near","far","Matrix4","fovy","perspective","zoom","position","log2","pow","Vector3","meterOffset","transformVector","center","_getCenterInWorld","viewMatrixUncentered","multiplyRight","translate","negate","center2d","pixelPosition","add","fovyDegrees","orthographicFocalDistance","radians","vpm","viewMatrixInverse","eye","direction","up","viewportMatrix","log","warn"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport log from '../utils/log';\nimport {createMat4, extractCameraVectors} from '../utils/math-utils';\n\nimport {Matrix4, Vector3, equals} from 'math.gl';\nimport * as mat4 from 'gl-matrix/mat4';\n\nimport {\n  getDistanceScales,\n  getMeterZoom,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  pixelsToWorld\n} from 'viewport-mercator-project';\n\nimport assert from '../utils/assert';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst IDENTITY = createMat4();\n\nconst ZERO_VECTOR = [0, 0, 0];\n\nconst DEFAULT_ZOOM = 0;\n\nconst ERR_ARGUMENT = 'Illegal argument to Viewport';\n\nexport default class Viewport {\n  /**\n   * @classdesc\n   * Manages coordinate system transformations for deck.gl.\n   *\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  constructor(opts = {}) {\n    const {\n      id = null,\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = opts;\n\n    this.id = id || this.constructor.displayName || 'viewport';\n\n    this.x = x;\n    this.y = y;\n    // Silently allow apps to send in w,h = 0,0\n    this.width = width || 1;\n    this.height = height || 1;\n\n    this._initViewMatrix(opts);\n    this._initProjectionMatrix(opts);\n    this._initPixelMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    this.projectFlat = this.projectFlat.bind(this);\n    this.unprojectFlat = this.unprojectFlat.bind(this);\n    this.getMatrices = this.getMatrices.bind(this);\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof Viewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      viewport.scale === this.scale &&\n      equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      equals(viewport.viewMatrix, this.viewMatrix)\n    );\n    // TODO - check distance scales?\n  }\n\n  /**\n   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n   * using viewport projection parameters\n   * - [longitude, latitude] to [x, y]\n   * - [longitude, latitude, Z] => [x, y, z]\n   * Note: By default, returns top-left coordinates for canvas/SVG type render\n   *\n   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether projected coords are top left\n   * @return {Array} - [x, y] or [x, y, z] in top left coords\n   */\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz, {topLeft = true, targetZ} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.pixelsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = this.projectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.pixelsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = this.unprojectFlat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerPixel[2];\n    return [X, Y, Z];\n  }\n\n  /**\n   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n   * Performs the nonlinear part of the web mercator projection.\n   * Remaining projection is done with 4x4 matrices which also handles\n   * perspective.\n   * @param {Array} lngLat - [lng, lat] coordinates\n   *   Specifies a point on the sphere to project onto the map.\n   * @return {Array} [x,y] coordinates.\n   */\n  projectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return lngLatToWorld(xyz, scale);\n    }\n    const {pixelsPerMeter} = this.distanceScales;\n    return [xyz[0] * pixelsPerMeter[0], xyz[1] * pixelsPerMeter[1]];\n  }\n\n  /**\n   * Unproject world point [x,y] on map onto {lat, lon} on sphere\n   * @param {object|Vector} xy - object with {x,y} members\n   *  representing point on projected map plane\n   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.\n   *   Has toArray method if you need a GeoJSON Array.\n   *   Per cartographic tradition, lat and lon are specified as degrees.\n   */\n  unprojectFlat(xyz, scale = this.scale) {\n    if (this.isGeospatial) {\n      return worldToLngLat(xyz, scale);\n    }\n    const {metersPerPixel} = this.distanceScales;\n    return [xyz[0] * metersPerPixel[0], xyz[1] * metersPerPixel[1]];\n  }\n\n  getDistanceScales(coordinateOrigin = null) {\n    if (coordinateOrigin) {\n      return getDistanceScales({\n        longitude: coordinateOrigin[0],\n        latitude: coordinateOrigin[1],\n        scale: this.scale,\n        highPrecision: true\n      });\n    }\n    return this.distanceScales;\n  }\n\n  getMatrices({modelMatrix = null} = {}) {\n    let modelViewProjectionMatrix = this.viewProjectionMatrix;\n    let pixelProjectionMatrix = this.pixelProjectionMatrix;\n    let pixelUnprojectionMatrix = this.pixelUnprojectionMatrix;\n\n    if (modelMatrix) {\n      modelViewProjectionMatrix = mat4.multiply([], this.viewProjectionMatrix, modelMatrix);\n      pixelProjectionMatrix = mat4.multiply([], this.pixelProjectionMatrix, modelMatrix);\n      pixelUnprojectionMatrix = mat4.invert([], pixelProjectionMatrix);\n    }\n\n    const matrices = Object.assign({\n      modelViewProjectionMatrix,\n      viewProjectionMatrix: this.viewProjectionMatrix,\n      viewMatrix: this.viewMatrix,\n      projectionMatrix: this.projectionMatrix,\n\n      // project/unproject between pixels and world\n      pixelProjectionMatrix,\n      pixelUnprojectionMatrix,\n\n      width: this.width,\n      height: this.height,\n      scale: this.scale\n    });\n\n    return matrices;\n  }\n\n  containsPixel({x, y, width = 1, height = 1}) {\n    return (\n      x < this.x + this.width &&\n      this.x < x + width &&\n      y < this.y + this.height &&\n      this.y < y + height\n    );\n  }\n\n  // EXPERIMENTAL METHODS\n\n  getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  getCameraDirection() {\n    return this.cameraDirection;\n  }\n\n  getCameraUp() {\n    return this.cameraUp;\n  }\n\n  // INTERNAL METHODS\n\n  // TODO - these are duplicating WebMercator methods\n  _addMetersToLngLat(lngLatZ, xyz) {\n    const [lng, lat, Z = 0] = lngLatZ;\n    const [deltaLng, deltaLat, deltaZ = 0] = this._metersToLngLatDelta(xyz);\n    return lngLatZ.length === 2\n      ? [lng + deltaLng, lat + deltaLat]\n      : [lng + deltaLng, lat + deltaLat, Z + deltaZ];\n  }\n\n  _metersToLngLatDelta(xyz) {\n    const [x, y, z = 0] = xyz;\n    assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z), ERR_ARGUMENT);\n    const {pixelsPerMeter, degreesPerPixel} = this.distanceScales;\n    const deltaLng = x * pixelsPerMeter[0] * degreesPerPixel[0];\n    const deltaLat = y * pixelsPerMeter[1] * degreesPerPixel[1];\n    return xyz.length === 2 ? [deltaLng, deltaLat] : [deltaLng, deltaLat, z];\n  }\n\n  _createProjectionMatrix({orthographic, fovyRadians, aspect, focalDistance, near, far}) {\n    assert(Number.isFinite(fovyRadians));\n    return orthographic\n      ? new Matrix4().orthographic({fovy: fovyRadians, aspect, focalDistance, near, far})\n      : new Matrix4().perspective({fovy: fovyRadians, aspect, near, far});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  _initViewMatrix(opts) {\n    const {\n      // view matrix\n      viewMatrix = IDENTITY,\n\n      longitude = null, // Anchor: lng lat zoom makes viewport work w/ geospatial coordinate systems\n      latitude = null,\n      zoom = null,\n\n      position = null, // Anchor position offset (in meters for geospatial viewports)\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n      focalDistance = 1, // Only needed for orthographic views\n\n      distanceScales = null\n    } = opts;\n\n    // Check if we have a geospatial anchor\n    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);\n\n    this.zoom = zoom;\n    if (!Number.isFinite(this.zoom)) {\n      this.zoom = this.isGeospatial\n        ? getMeterZoom({latitude}) + Math.log2(focalDistance)\n        : DEFAULT_ZOOM;\n    }\n    const scale = Math.pow(2, this.zoom);\n    this.scale = scale;\n\n    // Calculate distance scales if lng/lat/zoom are provided\n    this.distanceScales = this.isGeospatial\n      ? getDistanceScales({latitude, longitude, scale: this.scale})\n      : distanceScales || {\n          pixelsPerMeter: [scale, scale, scale],\n          metersPerPixel: [1 / scale, 1 / scale, 1 / scale]\n        };\n\n    this.focalDistance = focalDistance;\n\n    this.distanceScales.metersPerPixel = new Vector3(this.distanceScales.metersPerPixel);\n    this.distanceScales.pixelsPerMeter = new Vector3(this.distanceScales.pixelsPerMeter);\n\n    this.position = ZERO_VECTOR;\n    this.meterOffset = ZERO_VECTOR;\n    if (position) {\n      // Apply model matrix if supplied\n      this.position = position;\n      this.modelMatrix = modelMatrix;\n      this.meterOffset = modelMatrix ? modelMatrix.transformVector(position) : position;\n    }\n\n    if (this.isGeospatial) {\n      // Determine camera center\n      this.longitude = longitude;\n      this.latitude = latitude;\n      this.center = this._getCenterInWorld({longitude, latitude});\n\n      // Flip Y to match the orientation of the Mercator plane\n      this.viewMatrixUncentered = mat4.scale([], viewMatrix, [1, -1, 1]);\n    } else {\n      this.center = position ? this.projectPosition(position) : [0, 0, 0];\n      this.viewMatrixUncentered = viewMatrix;\n    }\n    // Make a centered version of the matrix for projection modes without an offset\n    this.viewMatrix = new Matrix4()\n      // Apply the uncentered view matrix\n      .multiplyRight(this.viewMatrixUncentered)\n      // And center it\n      .translate(new Vector3(this.center || ZERO_VECTOR).negate());\n  }\n  /* eslint-enable complexity, max-statements */\n\n  _getCenterInWorld({longitude, latitude}) {\n    const {meterOffset, scale, distanceScales} = this;\n\n    // Make a centered version of the matrix for projection modes without an offset\n    const center2d = this.projectFlat([longitude, latitude], scale);\n    const center = new Vector3(center2d[0], center2d[1], 0);\n\n    if (meterOffset) {\n      const pixelPosition = new Vector3(meterOffset)\n        // Convert to pixels in current zoom\n        .scale(distanceScales.pixelsPerMeter);\n      center.add(pixelPosition);\n    }\n\n    return center;\n  }\n\n  _initProjectionMatrix(opts) {\n    const {\n      // Projection matrix\n      projectionMatrix = null,\n\n      // Projection matrix parameters, used if projectionMatrix not supplied\n      orthographic = false,\n      fovyRadians,\n      fovyDegrees,\n      fovy,\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      focalDistance = 1, // Only needed for orthographic views\n      orthographicFocalDistance\n    } = opts;\n\n    const radians = fovyRadians || (fovyDegrees || fovy || 75) * DEGREES_TO_RADIANS;\n\n    this.projectionMatrix =\n      projectionMatrix ||\n      this._createProjectionMatrix({\n        orthographic,\n        fovyRadians: radians,\n        aspect: this.width / this.height,\n        focalDistance: orthographicFocalDistance || focalDistance,\n        near,\n        far\n      });\n  }\n\n  _initPixelMatrices() {\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, this.projectionMatrix);\n    mat4.multiply(vpm, vpm, this.viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // console.log('VPM', this.viewMatrix, this.projectionMatrix, this.viewProjectionMatrix);\n\n    // Calculate inverse view matrix\n    this.viewMatrixInverse = mat4.invert([], this.viewMatrix) || this.viewMatrix;\n\n    // Decompose camera directions\n    const {eye, direction, up} = extractCameraVectors({\n      viewMatrix: this.viewMatrix,\n      viewMatrixInverse: this.viewMatrixInverse\n    });\n    this.cameraPosition = eye;\n    this.cameraDirection = direction;\n    this.cameraUp = up;\n\n    // console.log(this.cameraPosition, this.cameraDirection, this.cameraUp);\n\n    /*\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n\n    // matrix for conversion from world location to screen (pixel) coordinates\n    const viewportMatrix = createMat4(); // matrix from NDC to viewport.\n    const pixelProjectionMatrix = createMat4(); // matrix from world space to viewport.\n    mat4.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);\n    mat4.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);\n    mat4.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);\n    this.pixelProjectionMatrix = pixelProjectionMatrix;\n    this.viewportMatrix = viewportMatrix;\n\n    this.pixelUnprojectionMatrix = mat4.invert(createMat4(), this.pixelProjectionMatrix);\n    if (!this.pixelUnprojectionMatrix) {\n      log.warn('Pixel project matrix not invertible')();\n      // throw new Error('Pixel project matrix not invertible');\n    }\n  }\n}\n\nViewport.displayName = 'Viewport';\n"],"file":"viewport.js"}