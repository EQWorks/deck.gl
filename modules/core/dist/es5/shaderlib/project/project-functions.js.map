{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","longitude","latitude","z","X","Y","projectFlat","distanceScales","scale","getDistanceScales","Z","pixelsPerMeter","normalizeParameters","opts","normalizedParams","Object","assign","coordinateSystem","coordinateOrigin","fromCoordinateSystem","fromCoordinateOrigin","undefined","COORDINATE_SYSTEM","LNGLAT","zoom","LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD","LNGLAT_OFFSETS","Math","fround","getWorldPosition","position","modelMatrix","x","y","vec4","transformMat4","LNGLAT_DEPRECATED","METER_OFFSETS","IDENTITY","projectPosition","params","worldPosition","originWorld","vec3","sub"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD} from './viewport-uniforms';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {getDistanceScales, addMetersToLngLat} from 'viewport-mercator-project';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (pixelsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n  const [longitude, latitude, z = 0] = lngLatZ;\n  const [X, Y] = viewport.projectFlat(lngLatZ);\n  const distanceScales = offsetMode\n    ? getDistanceScales({longitude, latitude, scale: viewport.scale})\n    : viewport.getDistanceScales();\n  const Z = z * distanceScales.pixelsPerMeter[2];\n  return [X, Y, Z];\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = Object.assign({}, opts);\n\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = opts;\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  if (\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT &&\n    viewport.zoom >= LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD\n  ) {\n    normalizedParams.coordinateSystem = COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n    normalizedParams.coordinateOrigin = [\n      Math.fround(viewport.longitude),\n      Math.fround(viewport.latitude)\n    ];\n  }\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(\n  position,\n  {viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode}\n) {\n  let [x, y, z] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]),\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.IDENTITY:\n    default:\n      return viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the reference coordinate system used\n *   align world position\n * @param {array} params.coordinateOrigin - the reference coordinate origin used\n *   to align world position\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case COORDINATE_SYSTEM.METER_OFFSETS: {\n      const worldPosition = getWorldPosition(position, {\n        viewport,\n        modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode: true\n      });\n      const originWorld = lngLatZToWorldPosition(coordinateOrigin, viewport, true);\n      vec3.sub(worldPosition, worldPosition, originWorld);\n\n      return worldPosition;\n    }\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n    case COORDINATE_SYSTEM.IDENTITY:\n    default:\n      return getWorldPosition(position, {\n        viewport,\n        modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode: false\n      });\n  }\n}\n"],"file":"project-functions.js"}