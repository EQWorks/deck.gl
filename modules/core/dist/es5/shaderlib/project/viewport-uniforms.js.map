{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD","getMemoizedViewportUniforms","calculateViewportUniforms","getShaderCoordinateSystem","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","LNGLAT_EXPERIMENTAL","PROJECT_COORDINATE_SYSTEM","LNGLAT_AUTO_OFFSET","LNGLAT_DEPRECATED","LNG_LAT","METER_OFFSETS","METERS","LNGLAT_OFFSETS","IDENTITY","calculateMatrixAndOffset","viewport","coordinateOrigin","coordinateZoom","viewMatrixUncentered","viewMatrix","projectionMatrix","viewProjectionMatrix","projectionCenter","cameraPosCommon","cameraPosition","shaderCoordinateSystem","shaderCoordinateOrigin","lng","Math","fround","longitude","lat","latitude","position","positionCommonSpace","projectPosition","pow","vec4","transformMat4","mat4","multiply","Error","getUniformsFromViewport","devicePixelRatio","modelMatrix","wrapLongitude","projectionMode","positionOrigin","Object","assign","project_uModelMatrix","zoom","distanceScales","getDistanceScales","viewportSize","width","height","uniforms","project_uCoordinateSystem","project_uCenter","project_uWrapLongitude","project_uAntimeridian","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","focalDistance","project_uCommonUnitsPerMeter","pixelsPerMeter","project_uCommonUnitsPerWorldUnit","project_uCommonUnitsPerWorldUnit2","project_uScale","scale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin","pixelsPerMeter2","project_uCoordinateOrigin","pixelsPerDegree","pixelsPerDegree2"],"mappings":";;;;;;;;;;AAoBA;;AACA;;AAEA;;AAEA;;AACA;;AAEA;;;;;;AAGA,MAAMA,WAAW,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAApB;AAEA,MAAMC,sBAAsB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAA/B;AACA,MAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAxB;AACA,MAAMC,wBAAwB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjC;AACA,MAAMC,yBAAyB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAlC;AAGO,MAAMC,iCAAiC,GAAG,EAA1C;;AAEP,MAAMC,2BAA2B,GAAG,sBAAQC,yBAAR,CAApC;;AAEA,SAASC,yBAAT,CAAmCC,gBAAnC,EAAqD;AACnD,UAAQA,gBAAR;AACE,SAAKC,6BAAkBC,MAAvB;AACA,SAAKD,6BAAkBE,mBAAvB;AACA;AACE,aAAOC,sCAA0BC,kBAAjC;;AAEF,SAAKJ,6BAAkBK,iBAAvB;AACE,aAAOF,sCAA0BG,OAAjC;;AAEF,SAAKN,6BAAkBO,aAAvB;AACA,SAAKP,6BAAkBQ,MAAvB;AACE,aAAOL,sCAA0BI,aAAjC;;AAEF,SAAKP,6BAAkBS,cAAvB;AACE,aAAON,sCAA0BM,cAAjC;;AAEF,SAAKT,6BAAkBU,QAAvB;AACE,aAAOP,sCAA0BO,QAAjC;AAjBJ;AAmBD;;AAKD,SAASC,wBAAT,OAOG;AAAA,MAP+B;AAEhCC,IAAAA,QAFgC;AAIhCb,IAAAA,gBAJgC;AAKhCc,IAAAA,gBALgC;AAMhCC,IAAAA;AANgC,GAO/B;AACD,QAAM;AAACC,IAAAA;AAAD,MAAyBH,QAA/B;AACA,MAAI;AAACI,IAAAA;AAAD,MAAeJ,QAAnB;AACA,QAAM;AAACK,IAAAA;AAAD,MAAqBL,QAA3B;AACA,MAAI;AAACM,IAAAA;AAAD,MAAyBN,QAA7B;AAEA,MAAIO,gBAAJ;AACA,MAAIC,eAAe,GAAGR,QAAQ,CAACS,cAA/B;AACA,MAAIC,sBAAsB,GAAGxB,yBAAyB,CAACC,gBAAD,CAAtD;AACA,MAAIwB,sBAAsB,GAAGV,gBAA7B;;AAEA,MAAIS,sBAAsB,KAAKnB,sCAA0BC,kBAAzD,EAA6E;AAC3E,QAAIU,cAAc,GAAGnB,iCAArB,EAAwD;AAEtD2B,MAAAA,sBAAsB,GAAGnB,sCAA0BG,OAAnD;AACD,KAHD,MAGO;AAEL,YAAMkB,GAAG,GAAGC,IAAI,CAACC,MAAL,CAAYd,QAAQ,CAACe,SAArB,CAAZ;AACA,YAAMC,GAAG,GAAGH,IAAI,CAACC,MAAL,CAAYd,QAAQ,CAACiB,QAArB,CAAZ;AACAN,MAAAA,sBAAsB,GAAG,CAACC,GAAD,EAAMI,GAAN,CAAzB;AACD;AACF;;AACD,MAAIN,sBAAsB,KAAKnB,sCAA0BO,QAAzD,EAAmE;AAEjEa,IAAAA,sBAAsB,GAAG,CAACE,IAAI,CAACC,MAAL,CAAYd,QAAQ,CAACkB,QAAT,CAAkB,CAAlB,CAAZ,CAAD,EAAoCL,IAAI,CAACC,MAAL,CAAYd,QAAQ,CAACkB,QAAT,CAAkB,CAAlB,CAAZ,CAApC,CAAzB;AACD;;AAEDP,EAAAA,sBAAsB,CAAC,CAAD,CAAtB,GAA4BA,sBAAsB,CAAC,CAAD,CAAtB,IAA6B,CAAzD;;AAEA,UAAQD,sBAAR;AACE,SAAKnB,sCAA0BG,OAA/B;AACEa,MAAAA,gBAAgB,GAAG7B,WAAnB;AACA;;AAGF,SAAKa,sCAA0BM,cAA/B;AACA,SAAKN,sCAA0BI,aAA/B;AACA,SAAKJ,sCAA0BC,kBAA/B;AACA,SAAKD,sCAA0BO,QAA/B;AAIE,YAAMqB,mBAAmB,GAAGnB,QAAQ,CAACoB,eAAT,CAC1BT,sBAD0B,EAE1BE,IAAI,CAACQ,GAAL,CAAS,CAAT,EAAYnB,cAAZ,CAF0B,CAA5B;AAKAM,MAAAA,eAAe,GAAG,CAChBA,eAAe,CAAC,CAAD,CAAf,GAAqBW,mBAAmB,CAAC,CAAD,CADxB,EAEhBX,eAAe,CAAC,CAAD,CAAf,GAAqBW,mBAAmB,CAAC,CAAD,CAFxB,EAGhBX,eAAe,CAAC,CAAD,CAAf,GAAqBW,mBAAmB,CAAC,CAAD,CAHxB,CAAlB;AAMAA,MAAAA,mBAAmB,CAAC,CAAD,CAAnB,GAAyB,CAAzB;AAIAZ,MAAAA,gBAAgB,GAAGe,IAAI,CAACC,aAAL,CAAmB,EAAnB,EAAuBJ,mBAAvB,EAA4Cb,oBAA5C,CAAnB;AAGAF,MAAAA,UAAU,GAAGD,oBAAoB,IAAIC,UAArC;AAKAE,MAAAA,oBAAoB,GAAGkB,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBpB,gBAAlB,EAAoCD,UAApC,CAAvB;AACAE,MAAAA,oBAAoB,GAAGkB,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBnB,oBAAlB,EAAwC3B,sBAAxC,CAAvB;AACA;;AAEF;AACE,YAAM,IAAI+C,KAAJ,CAAU,yBAAV,CAAN;AAzCJ;;AA4CA,SAAO;AACLtB,IAAAA,UADK;AAELE,IAAAA,oBAFK;AAGLC,IAAAA,gBAHK;AAILC,IAAAA,eAJK;AAKLE,IAAAA,sBALK;AAMLC,IAAAA;AANK,GAAP;AAQD;;AAWM,SAASgB,uBAAT,GAWC;AAAA,MAXgC;AACtC3B,IAAAA,QADsC;AAEtC4B,IAAAA,gBAAgB,GAAG,CAFmB;AAGtCC,IAAAA,WAAW,GAAG,IAHwB;AAKtC1C,IAAAA,gBAAgB,GAAGC,6BAAkBC,MALC;AAMtCY,IAAAA,gBAAgB,GAAGnB,yBANmB;AAOtCgD,IAAAA,aAAa,GAAG,KAPsB;AAStCC,IAAAA,cATsC;AAUtCC,IAAAA;AAVsC,GAWhC,uEAAJ,EAAI;AACN,uBAAOhC,QAAP;AAEA,SAAOiC,MAAM,CAACC,MAAP,CACL;AACEC,IAAAA,oBAAoB,EAAEN,WAAW,IAAIjD;AADvC,GADK,EAILI,2BAA2B,CAAC;AAC1BgB,IAAAA,QAD0B;AAE1B4B,IAAAA,gBAF0B;AAG1BzC,IAAAA,gBAH0B;AAI1Bc,IAAAA,gBAJ0B;AAK1B6B,IAAAA;AAL0B,GAAD,CAJtB,CAAP;AAYD;;AAED,SAAS7C,yBAAT,QAMG;AAAA,MANgC;AACjCe,IAAAA,QADiC;AAEjC4B,IAAAA,gBAFiC;AAGjCzC,IAAAA,gBAHiC;AAIjCc,IAAAA,gBAJiC;AAKjC6B,IAAAA;AALiC,GAMhC;AACD,QAAM5B,cAAc,GAAGF,QAAQ,CAACoC,IAAhC;AAEA,QAAM;AACJ7B,IAAAA,gBADI;AAEJD,IAAAA,oBAFI;AAGJE,IAAAA,eAHI;AAIJE,IAAAA,sBAJI;AAKJC,IAAAA;AALI,MAMFZ,wBAAwB,CAAC;AAC3BZ,IAAAA,gBAD2B;AAE3Bc,IAAAA,gBAF2B;AAG3BC,IAAAA,cAH2B;AAI3BF,IAAAA;AAJ2B,GAAD,CAN5B;AAaA,uBAAOM,oBAAP,EAA6B,4CAA7B;AAGA,QAAM+B,cAAc,GAAGrC,QAAQ,CAACsC,iBAAT,EAAvB;AAEA,QAAMC,YAAY,GAAG,CAACvC,QAAQ,CAACwC,KAAT,GAAiBZ,gBAAlB,EAAoC5B,QAAQ,CAACyC,MAAT,GAAkBb,gBAAtD,CAArB;AAEA,QAAMc,QAAQ,GAAG;AAEfC,IAAAA,yBAAyB,EAAEjC,sBAFZ;AAGfkC,IAAAA,eAAe,EAAErC,gBAHF;AAIfsC,IAAAA,sBAAsB,EAAEf,aAJT;AAKfgB,IAAAA,qBAAqB,EAAE,CAAC9C,QAAQ,CAACe,SAAT,IAAsB,CAAvB,IAA4B,GALpC;AAQfgC,IAAAA,qBAAqB,EAAER,YARR;AASfS,IAAAA,yBAAyB,EAAEpB,gBATZ;AAYfqB,IAAAA,sBAAsB,EAAEjD,QAAQ,CAACkD,aAAT,IAA0B,CAZnC;AAafC,IAAAA,4BAA4B,EAAEd,cAAc,CAACe,cAb9B;AAcfC,IAAAA,gCAAgC,EAAEhB,cAAc,CAACe,cAdlC;AAefE,IAAAA,iCAAiC,EAAEzE,wBAfpB;AAgBf0E,IAAAA,cAAc,EAAEvD,QAAQ,CAACwD,KAhBV;AAkBfC,IAAAA,6BAA6B,EAAEnD,oBAlBhB;AAqBfoD,IAAAA,uBAAuB,EAAElD;AArBV,GAAjB;AAwBA,QAAMmD,sBAAsB,GAAG3D,QAAQ,CAACsC,iBAAT,CAA2B3B,sBAA3B,CAA/B;;AACA,UAAQD,sBAAR;AACE,SAAKnB,sCAA0BI,aAA/B;AACE+C,MAAAA,QAAQ,CAACW,gCAAT,GAA4CM,sBAAsB,CAACP,cAAnE;AACAV,MAAAA,QAAQ,CAACY,iCAAT,GAA6CK,sBAAsB,CAACC,eAApE;AACA;;AAEF,SAAKrE,sCAA0BC,kBAA/B;AACEkD,MAAAA,QAAQ,CAACmB,yBAAT,GAAqClD,sBAArC;;AAEF,SAAKpB,sCAA0BG,OAA/B;AACA,SAAKH,sCAA0BM,cAA/B;AACE6C,MAAAA,QAAQ,CAACW,gCAAT,GAA4CM,sBAAsB,CAACG,eAAnE;AACApB,MAAAA,QAAQ,CAACY,iCAAT,GAA6CK,sBAAsB,CAACI,gBAApE;AACA;;AAEF,SAAKxE,sCAA0BO,QAA/B;AACE4C,MAAAA,QAAQ,CAACmB,yBAAT,GAAqClD,sBAArC;AACA;;AAEF;AACE;AApBJ;;AAuBA,SAAO+B,QAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\n\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\nimport assert from '../../utils/assert';\n\nimport {PROJECT_COORDINATE_SYSTEM} from './constants';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\n// Based on viewport-mercator-project/test/fp32-limits.js\nexport const LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD = 12;\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\nfunction getShaderCoordinateSystem(coordinateSystem) {\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_EXPERIMENTAL:\n    default:\n      return PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET;\n\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      return PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n    case COORDINATE_SYSTEM.METERS:\n      return PROJECT_COORDINATE_SYSTEM.METER_OFFSETS;\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n\n    case COORDINATE_SYSTEM.IDENTITY:\n      return PROJECT_COORDINATE_SYSTEM.IDENTITY;\n  }\n}\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\n// Uncomment when debugging\nfunction calculateMatrixAndOffset({\n  // UNCHANGED\n  viewport,\n  // NEW PARAMS\n  coordinateSystem,\n  coordinateOrigin,\n  coordinateZoom\n}) {\n  const {viewMatrixUncentered} = viewport;\n  let {viewMatrix} = viewport;\n  const {projectionMatrix} = viewport;\n  let {viewProjectionMatrix} = viewport;\n\n  let projectionCenter;\n  let cameraPosCommon = viewport.cameraPosition;\n  let shaderCoordinateSystem = getShaderCoordinateSystem(coordinateSystem);\n  let shaderCoordinateOrigin = coordinateOrigin;\n\n  if (shaderCoordinateSystem === PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET) {\n    if (coordinateZoom < LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD) {\n      // Use LNG_LAT projection if not zooming\n      shaderCoordinateSystem = PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n    } else {\n      // Use LNGLAT_AUTO_OFFSET\n      const lng = Math.fround(viewport.longitude);\n      const lat = Math.fround(viewport.latitude);\n      shaderCoordinateOrigin = [lng, lat];\n    }\n  }\n  if (shaderCoordinateSystem === PROJECT_COORDINATE_SYSTEM.IDENTITY) {\n    // We only support 64-bit precision in the X and Y components of positions for now\n    shaderCoordinateOrigin = [Math.fround(viewport.position[0]), Math.fround(viewport.position[1])];\n  }\n\n  shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n\n  switch (shaderCoordinateSystem) {\n    case PROJECT_COORDINATE_SYSTEM.LNG_LAT:\n      projectionCenter = ZERO_VECTOR;\n      break;\n\n    // TODO: make lighting work for meter offset mode\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case PROJECT_COORDINATE_SYSTEM.METER_OFFSETS:\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET:\n    case PROJECT_COORDINATE_SYSTEM.IDENTITY:\n      // Calculate transformed projectionCenter (using 64 bit precision JS)\n      // This is the key to offset mode precision\n      // (avoids doing this addition in 32 bit precision in GLSL)\n      const positionCommonSpace = viewport.projectPosition(\n        shaderCoordinateOrigin,\n        Math.pow(2, coordinateZoom)\n      );\n\n      cameraPosCommon = [\n        cameraPosCommon[0] - positionCommonSpace[0],\n        cameraPosCommon[1] - positionCommonSpace[1],\n        cameraPosCommon[2] - positionCommonSpace[2]\n      ];\n\n      positionCommonSpace[3] = 1;\n\n      // projectionCenter = new Matrix4(viewProjectionMatrix)\n      //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n      projectionCenter = vec4.transformMat4([], positionCommonSpace, viewProjectionMatrix);\n\n      // Always apply uncentered projection matrix if available (shader adds center)\n      viewMatrix = viewMatrixUncentered || viewMatrix;\n\n      // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n      // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n      //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n      viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n      break;\n\n    default:\n      throw new Error('Unknown projection mode');\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    cameraPosCommon,\n    shaderCoordinateSystem,\n    shaderCoordinateOrigin\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN,\n  wrapLongitude = false,\n  // Deprecated\n  projectionMode,\n  positionOrigin\n} = {}) {\n  assert(viewport);\n\n  return Object.assign(\n    {\n      project_uModelMatrix: modelMatrix || IDENTITY_MATRIX\n    },\n    getMemoizedViewportUniforms({\n      viewport,\n      devicePixelRatio,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude\n    })\n  );\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin,\n  wrapLongitude\n}) {\n  const coordinateZoom = viewport.zoom;\n\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    cameraPosCommon,\n    shaderCoordinateSystem,\n    shaderCoordinateOrigin\n  } = calculateMatrixAndOffset({\n    coordinateSystem,\n    coordinateOrigin,\n    coordinateZoom,\n    viewport\n  });\n\n  assert(viewProjectionMatrix, 'Viewport missing modelViewProjectionMatrix');\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: shaderCoordinateSystem,\n    project_uCenter: projectionCenter,\n    project_uWrapLongitude: wrapLongitude,\n    project_uAntimeridian: (viewport.longitude || 0) - 180,\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    // Distance at which screen pixels are projected\n    project_uFocalDistance: viewport.focalDistance || 1,\n    project_uCommonUnitsPerMeter: distanceScales.pixelsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.pixelsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPosCommon\n  };\n\n  const distanceScalesAtOrigin = viewport.getDistanceScales(shaderCoordinateOrigin);\n  switch (shaderCoordinateSystem) {\n    case PROJECT_COORDINATE_SYSTEM.METER_OFFSETS:\n      uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.pixelsPerMeter;\n      uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.pixelsPerMeter2;\n      break;\n\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET:\n      uniforms.project_uCoordinateOrigin = shaderCoordinateOrigin;\n    // eslint-disable-line no-fallthrough\n    case PROJECT_COORDINATE_SYSTEM.LNG_LAT:\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.pixelsPerDegree;\n      uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.pixelsPerDegree2;\n      break;\n\n    case PROJECT_COORDINATE_SYSTEM.IDENTITY:\n      uniforms.project_uCoordinateOrigin = shaderCoordinateOrigin;\n      break;\n\n    default:\n      break;\n  }\n\n  return uniforms;\n}\n"],"file":"viewport-uniforms.js"}