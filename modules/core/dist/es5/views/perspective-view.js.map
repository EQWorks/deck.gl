{"version":3,"sources":["../../../src/views/perspective-view.js"],"names":["DEGREES_TO_RADIANS","Math","PI","PerspectiveView","View","_getViewport","props","x","y","width","height","viewState","eye","lookAt","up","fovy","near","far","aspect","Number","isFinite","fovyRadians","Viewport","id","viewMatrix","mat4","projectionMatrix","perspective","displayName"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;;AAEA,MAAMA,kBAAkB,GAAGC,IAAI,CAACC,EAAL,GAAU,GAArC;;AAEe,MAAMC,eAAN,SAA8BC,aAA9B,CAAmC;AAChDC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,UAAM;AAEJC,MAAAA,CAFI;AAGJC,MAAAA,CAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,MALI;AAOJC,MAAAA;AAPI,QAQFL,KARJ;AAUA,UAAM;AAEJM,MAAAA,GAFI;AAGJC,MAAAA,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHL;AAIJC,MAAAA,EAAE,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAJD,QAKFH,SALJ;AASA,UAAMI,IAAI,GAAGT,KAAK,CAACS,IAAN,IAAcJ,SAAS,CAACI,IAAxB,IAAgC,EAA7C;AACA,UAAMC,IAAI,GAAGV,KAAK,CAACU,IAAN,IAAcL,SAAS,CAACK,IAAxB,IAAgC,CAA7C;AACA,UAAMC,GAAG,GAAGX,KAAK,CAACW,GAAN,IAAaN,SAAS,CAACM,GAAvB,IAA8B,GAA1C;AACA,UAAMC,MAAM,GAAGC,MAAM,CAACC,QAAP,CAAgBT,SAAS,CAACO,MAA1B,IAAoCP,SAAS,CAACO,MAA9C,GAAuDT,KAAK,GAAGC,MAA9E;AAEA,UAAMW,WAAW,GAAGN,IAAI,GAAGf,kBAA3B;AACA,WAAO,IAAIsB,iBAAJ,CAAa;AAClBC,MAAAA,EAAE,EAAE,KAAKA,EADS;AAElBhB,MAAAA,CAFkB;AAGlBC,MAAAA,CAHkB;AAIlBC,MAAAA,KAJkB;AAKlBC,MAAAA,MALkB;AAMlBc,MAAAA,UAAU,EAAEC,IAAI,CAACZ,MAAL,CAAY,EAAZ,EAAgBD,GAAhB,EAAqBC,MAArB,EAA6BC,EAA7B,CANM;AAOlBY,MAAAA,gBAAgB,EAAED,IAAI,CAACE,WAAL,CAAiB,EAAjB,EAAqBN,WAArB,EAAkCH,MAAlC,EAA0CF,IAA1C,EAAgDC,GAAhD;AAPA,KAAb,CAAP;AASD;;AApC+C;;;AAuClDd,eAAe,CAACyB,WAAhB,GAA8B,iBAA9B","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport * as mat4 from 'gl-matrix/mat4';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nexport default class PerspectiveView extends View {\n  _getViewport(props) {\n    const {\n      // viewport arguments\n      x,\n      y,\n      width, // Width of viewport\n      height, // Height of viewport\n\n      viewState\n    } = props;\n\n    const {\n      // view matrix arguments\n      eye, // Defines eye position\n      lookAt = [0, 0, 0], // Which point is camera looking at, default origin\n      up = [0, 1, 0] // Defines up direction, default positive y axis\n    } = viewState;\n\n    // Projection matrix arguments\n    // TODO - Extracting from viewState is deprecated\n    const fovy = props.fovy || viewState.fovy || 75; // Field of view covered by camera\n    const near = props.near || viewState.near || 1; // Distance of near clipping plane\n    const far = props.far || viewState.far || 100; // Distance of far clipping plane\n    const aspect = Number.isFinite(viewState.aspect) ? viewState.aspect : width / height;\n\n    const fovyRadians = fovy * DEGREES_TO_RADIANS;\n    return new Viewport({\n      id: this.id,\n      x,\n      y,\n      width,\n      height,\n      viewMatrix: mat4.lookAt([], eye, lookAt, up),\n      projectionMatrix: mat4.perspective([], fovyRadians, aspect, near, far)\n    });\n  }\n}\n\nPerspectiveView.displayName = 'PerspectiveView';\n"],"file":"perspective-view.js"}