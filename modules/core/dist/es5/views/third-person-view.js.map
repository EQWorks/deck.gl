{"version":3,"sources":["../../../src/views/third-person-view.js"],"names":["getDirectionFromBearingAndPitch","bearing","pitch","spherical","SphericalCoordinates","toVector3","normalize","ThirdPersonView","View","_getViewport","props","position","up","zoom","viewState","direction","distance","eye","scale","multiply","Vector3","viewMatrix","Matrix4","multiplyRight","lookAt","center","Viewport","Object","assign","id","displayName"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,+BAAT,OAA2D;AAAA,MAAlB;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAAkB;AACzD,QAAMC,SAAS,GAAG,IAAIC,2BAAJ,CAAyB;AAACH,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAAzB,CAAlB;AACA,SAAOC,SAAS,CAACE,SAAV,GAAsBC,SAAtB,EAAP;AACD;;AAEc,MAAMC,eAAN,SAA8BC,aAA9B,CAAmC;AAChDC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,UAAM;AAACT,MAAAA,OAAD;AAAUC,MAAAA,KAAV;AAAiBS,MAAAA,QAAjB;AAA2BC,MAAAA,EAA3B;AAA+BC,MAAAA;AAA/B,QAAuCH,KAAK,CAACI,SAAnD;AAEA,UAAMC,SAAS,GAAGf,+BAA+B,CAAC;AAChDC,MAAAA,OADgD;AAEhDC,MAAAA;AAFgD,KAAD,CAAjD;AAKA,UAAMc,QAAQ,GAAGH,IAAI,GAAG,EAAxB;AAIA,UAAMI,GAAG,GAAGF,SAAS,CAACG,KAAV,CAAgB,CAACF,QAAjB,EAA2BG,QAA3B,CAAoC,IAAIC,aAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAC,CAAnB,CAApC,CAAZ;AAEA,UAAMC,UAAU,GAAG,IAAIC,aAAJ,GAAcC,aAAd,CACjB,IAAID,aAAJ,GAAcE,MAAd,CAAqB;AAACP,MAAAA,GAAD;AAAMQ,MAAAA,MAAM,EAAEd,QAAd;AAAwBC,MAAAA;AAAxB,KAArB,CADiB,CAAnB;AAIA,WAAO,IAAIc,iBAAJ,CACLC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,KAAlB,EAAyB;AACvBmB,MAAAA,EAAE,EAAE,KAAKA,EADc;AAEvBhB,MAAAA,IAAI,EAAE,IAFiB;AAGvBQ,MAAAA;AAHuB,KAAzB,CADK,CAAP;AAOD;;AA1B+C;;;AA6BlDd,eAAe,CAACuB,WAAhB,GAA8B,iBAA9B","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\nimport {Vector3, Matrix4, _SphericalCoordinates as SphericalCoordinates} from 'math.gl';\n\nfunction getDirectionFromBearingAndPitch({bearing, pitch}) {\n  const spherical = new SphericalCoordinates({bearing, pitch});\n  return spherical.toVector3().normalize();\n}\n\nexport default class ThirdPersonView extends View {\n  _getViewport(props) {\n    const {bearing, pitch, position, up, zoom} = props.viewState;\n\n    const direction = getDirectionFromBearingAndPitch({\n      bearing,\n      pitch\n    });\n\n    const distance = zoom * 50;\n\n    // TODO somehow need to flip z to make it work\n    // check if the position offset is done in the base viewport\n    const eye = direction.scale(-distance).multiply(new Vector3(1, 1, -1));\n\n    const viewMatrix = new Matrix4().multiplyRight(\n      new Matrix4().lookAt({eye, center: position, up})\n    );\n\n    return new Viewport(\n      Object.assign({}, props, {\n        id: this.id,\n        zoom: null, // triggers meter level zoom\n        viewMatrix\n      })\n    );\n  }\n}\n\nThirdPersonView.displayName = 'ThirdPersonView';\n"],"file":"third-person-view.js"}