{"version":3,"sources":["../../../src/views/view.js"],"names":["View","constructor","props","id","x","y","width","height","projectionMatrix","fovy","near","far","modelMatrix","viewportInstance","type","Viewport","displayName","Object","assign","_parseDimensions","equals","bind","seal","view","viewChanged","makeViewport","viewState","filterViewState","viewportDimensions","getDimensions","_getViewport","getViewStateId","newViewState","key","_x","_y","_width","_height","_getControllerProps","defaultOpts","opts","controller","ViewportType"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEe,MAAMA,IAAN,CAAW;AACxBC,EAAAA,WAAW,GAAa;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACtB,UAAM;AACJC,MAAAA,EAAE,GAAG,IADD;AAIJC,MAAAA,CAAC,GAAG,CAJA;AAKJC,MAAAA,CAAC,GAAG,CALA;AAMJC,MAAAA,KAAK,GAAG,MANJ;AAOJC,MAAAA,MAAM,GAAG,MAPL;AAUJC,MAAAA,gBAAgB,GAAG,IAVf;AAWJC,MAAAA,IAAI,GAAG,EAXH;AAYJC,MAAAA,IAAI,GAAG,GAZH;AAaJC,MAAAA,GAAG,GAAG,IAbF;AAcJC,MAAAA,WAAW,GAAG,IAdV;AAiBJC,MAAAA,gBAAgB,GAAG,IAjBf;AAoBJC,MAAAA,IAAI,GAAGC;AApBH,QAqBFb,KArBJ;AAuBA,yBAAO,CAACW,gBAAD,IAAqBA,gBAAgB,YAAYE,iBAAxD;AACA,SAAKF,gBAAL,GAAwBA,gBAAxB;AAGA,SAAKV,EAAL,GAAUA,EAAE,IAAI,KAAKF,WAAL,CAAiBe,WAAvB,IAAsC,MAAhD;AACA,SAAKF,IAAL,GAAYA,IAAZ;AAEA,SAAKZ,KAAL,GAAae,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,KAAlB,EAAyB;AACpCM,MAAAA,gBADoC;AAEpCC,MAAAA,IAFoC;AAGpCC,MAAAA,IAHoC;AAIpCC,MAAAA,GAJoC;AAKpCC,MAAAA;AALoC,KAAzB,CAAb;;AASA,SAAKO,gBAAL,CAAsB;AAACf,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAtB;;AAGA,SAAKa,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AAEAJ,IAAAA,MAAM,CAACK,IAAP,CAAY,IAAZ;AACD;;AAEDF,EAAAA,MAAM,CAACG,IAAD,EAAO;AACX,QAAI,SAASA,IAAb,EAAmB;AACjB,aAAO,IAAP;AACD;;AAID,QAAI,KAAKV,gBAAT,EAA2B;AACzB,aAAOU,IAAI,CAACV,gBAAL,IAAyB,KAAKA,gBAAL,CAAsBO,MAAtB,CAA6BG,IAAI,CAACV,gBAAlC,CAAhC;AACD;;AAED,UAAMW,WAAW,GAAG,0BAAU,KAAKtB,KAAf,EAAsBqB,IAAI,CAACrB,KAA3B,CAApB;AAEA,WAAOsB,WAAP;AACD;;AAIDC,EAAAA,YAAY,OAA6B;AAAA,QAA5B;AAACnB,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBmB,MAAAA;AAAhB,KAA4B;;AACvC,QAAI,KAAKb,gBAAT,EAA2B;AACzB,aAAO,KAAKA,gBAAZ;AACD;;AAEDa,IAAAA,SAAS,GAAG,KAAKC,eAAL,CAAqBD,SAArB,CAAZ;AAGA,UAAME,kBAAkB,GAAG,KAAKC,aAAL,CAAmB;AAACvB,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAnB,CAA3B;AACA,UAAML,KAAK,GAAGe,MAAM,CAACC,MAAP,CAAc;AAACQ,MAAAA;AAAD,KAAd,EAA2BA,SAA3B,EAAsC,KAAKxB,KAA3C,EAAkD0B,kBAAlD,CAAd;AACA,WAAO,KAAKE,YAAL,CAAkB5B,KAAlB,CAAP;AACD;;AAED6B,EAAAA,cAAc,GAAG;AACf,YAAQ,OAAO,KAAK7B,KAAL,CAAWwB,SAA1B;AACE,WAAK,QAAL;AAEE,eAAO,KAAKxB,KAAL,CAAWwB,SAAlB;;AAEF,WAAK,QAAL;AAEE,eAAO,KAAKxB,KAAL,CAAWwB,SAAX,IAAwB,KAAKxB,KAAL,CAAWwB,SAAX,CAAqBvB,EAApD;;AAEF;AACE,eAAO,KAAKA,EAAZ;AAVJ;AAYD;;AAGDwB,EAAAA,eAAe,CAACD,SAAD,EAAY;AACzB,QAAI,KAAKxB,KAAL,CAAWwB,SAAX,IAAwB,OAAO,KAAKxB,KAAL,CAAWwB,SAAlB,KAAgC,QAA5D,EAAsE;AAGpE,UAAI,CAAC,KAAKxB,KAAL,CAAWwB,SAAX,CAAqBvB,EAA1B,EAA8B;AAC5B,eAAO,KAAKD,KAAL,CAAWwB,SAAlB;AACD;;AAGD,YAAMM,YAAY,GAAGf,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBQ,SAAlB,CAArB;;AACA,WAAK,MAAMO,GAAX,IAAkB,KAAK/B,KAAL,CAAWwB,SAA7B,EAAwC;AACtC,YAAIO,GAAG,KAAK,IAAZ,EAAkB;AAChBD,UAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoB,KAAK/B,KAAL,CAAWwB,SAAX,CAAqBO,GAArB,CAApB;AACD;AACF;;AACD,aAAOD,YAAP;AACD;;AAED,WAAON,SAAP;AACD;;AAGDG,EAAAA,aAAa,QAAkB;AAAA,QAAjB;AAACvB,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAiB;AAC7B,WAAO;AACLH,MAAAA,CAAC,EAAE,4BAAY,KAAK8B,EAAjB,EAAqB5B,KAArB,CADE;AAELD,MAAAA,CAAC,EAAE,4BAAY,KAAK8B,EAAjB,EAAqB5B,MAArB,CAFE;AAGLD,MAAAA,KAAK,EAAE,4BAAY,KAAK8B,MAAjB,EAAyB9B,KAAzB,CAHF;AAILC,MAAAA,MAAM,EAAE,4BAAY,KAAK8B,OAAjB,EAA0B9B,MAA1B;AAJH,KAAP;AAMD;;AAGD+B,EAAAA,mBAAmB,CAACC,WAAD,EAAc;AAC/B,QAAIC,IAAI,GAAG,KAAKtC,KAAL,CAAWuC,UAAtB;;AAEA,QAAI,CAACD,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAOD,WAAP;AACD;;AACD,QAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;AAC9BA,MAAAA,IAAI,GAAG;AAAC1B,QAAAA,IAAI,EAAE0B;AAAP,OAAP;AACD;;AACD,WAAOvB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBqB,WAAlB,EAA+BC,IAA/B,CAAP;AACD;;AAGDV,EAAAA,YAAY,CAAC5B,KAAD,EAAQ;AAElB,UAAM;AAACY,MAAAA,IAAI,EAAE4B;AAAP,QAAuB,IAA7B;AACA,WAAO,IAAIA,YAAJ,CAAiBxC,KAAjB,CAAP;AACD;;AAGDiB,EAAAA,gBAAgB,QAAwB;AAAA,QAAvB;AAACf,MAAAA,CAAD;AAAIC,MAAAA,CAAJ;AAAOC,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAuB;AACtC,SAAK2B,EAAL,GAAU,8BAAc9B,CAAd,CAAV;AACA,SAAK+B,EAAL,GAAU,8BAAc9B,CAAd,CAAV;AACA,SAAK+B,MAAL,GAAc,8BAAc9B,KAAd,CAAd;AACA,SAAK+B,OAAL,GAAe,8BAAc9B,MAAd,CAAf;AACD;;AA5JuB","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\n\nexport default class View {\n  constructor(props = {}) {\n    const {\n      id = null,\n\n      // Window width/height in pixels (for pixel projection)\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n\n      // Viewport Options\n      projectionMatrix = null, // Projection matrix\n      fovy = 50, // Perspective projection parameters, used if projectionMatrix not supplied\n      near = 0.1, // Distance of near clipping plane\n      far = 1000, // Distance of far clipping plane\n      modelMatrix = null, // A model matrix to be applied to position, to match the layer props API\n\n      // A View can be a wrapper for a viewport instance\n      viewportInstance = null,\n\n      // Internal: Viewport Type\n      type = Viewport // TODO - default to WebMercator?\n    } = props;\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // Id\n    this.id = id || this.constructor.displayName || 'view';\n    this.type = type;\n\n    this.props = Object.assign({}, props, {\n      projectionMatrix,\n      fovy,\n      near,\n      far,\n      modelMatrix\n    });\n\n    // Extents\n    this._parseDimensions({x, y, width, height});\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance && this.viewportInstance.equals(view.viewportInstance);\n    }\n\n    const viewChanged = deepEqual(this.props, view.props);\n\n    return viewChanged;\n  }\n\n  // Build a `Viewport` from a view descriptor\n  // TODO - add support for autosizing viewports using width and height\n  makeViewport({width, height, viewState}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    const props = Object.assign({viewState}, viewState, this.props, viewportDimensions);\n    return this._getViewport(props);\n  }\n\n  getViewStateId() {\n    switch (typeof this.props.viewState) {\n      case 'string':\n        // if View.viewState is a string, return it\n        return this.props.viewState;\n\n      case 'object':\n        // If it is an object, return its id component\n        return this.props.viewState && this.props.viewState.id;\n\n      default:\n        return this.id;\n    }\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = Object.assign({}, viewState);\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  // Resolve relative viewport dimensions into actual dimensions (y='50%', width=800 => y=400)\n  getDimensions({width, height}) {\n    return {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n  }\n\n  // Used by sub classes to resolve controller props\n  _getControllerProps(defaultOpts) {\n    let opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return defaultOpts;\n    }\n    if (typeof opts === 'function') {\n      opts = {type: opts};\n    }\n    return Object.assign({}, defaultOpts, opts);\n  }\n\n  // Overridable method\n  _getViewport(props) {\n    // Get the type of the viewport\n    const {type: ViewportType} = this;\n    return new ViewportType(props);\n  }\n\n  // Parse relative viewport dimension descriptors (e.g {y: '50%', height: '50%'})\n  _parseDimensions({x, y, width, height}) {\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n  }\n}\n"],"file":"view.js"}