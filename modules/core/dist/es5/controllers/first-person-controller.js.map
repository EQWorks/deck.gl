{"version":3,"sources":["../../../src/controllers/first-person-controller.js"],"names":["MOVEMENT_SPEED","ROTATION_STEP_DEGREES","ensureFinite","value","fallbackValue","Number","isFinite","FirstPersonState","ViewState","constructor","width","height","position","bearing","pitch","longitude","latitude","zoom","syncBearing","bounds","startPanEventPosition","startPanPosition","startRotateCenter","startRotateViewport","startZoomPos","startZoom","_interactiveState","getInteractiveState","panStart","pos","translationX","translationY","_viewportProps","_getUpdatedState","pan","startPos","deltaX","deltaY","panEnd","startPanPos","rotateStart","rotate","deltaScaleX","deltaScaleY","rotateEnd","zoomStart","scale","minZoom","maxZoom","newZoom","cx","cy","newTranslationX","newTranslationY","moveBackward","moveForward","zoomEnd","moveLeft","newBearing","moveRight","direction","getDirection","delta","Vector3","normalize","add","moveUp","moveDown","zoomIn","zoomOut","newProps","Object","assign","FirstPersonController","Controller","props"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector3, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 1; // 1 meter per keyboard click\nconst ROTATION_STEP_DEGREES = 2;\n\n/* Helpers */\n\nfunction ensureFinite(value, fallbackValue) {\n  return Number.isFinite(value) ? value : fallbackValue;\n}\n\nclass FirstPersonState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n\n    // Position and orientation\n    position, // typically in meters from anchor point\n\n    bearing, // Rotation around y axis\n    pitch, // Rotation around x axis\n\n    // Geospatial anchor\n    longitude,\n    latitude,\n    zoom,\n\n    syncBearing = true, // Whether to lock bearing to direction\n\n    // Constraints - simple movement limit\n    // Bounding box of the world, in the shape of {minX, maxX, minY, maxY, minZ, maxZ}\n    bounds,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanEventPosition,\n    startPanPosition,\n\n    // Model state when the rotate operation first started\n    startRotateCenter,\n    startRotateViewport,\n\n    // Model state when the zoom operation first started\n    startZoomPos,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      zoom\n    });\n\n    this._interactiveState = {\n      startPanEventPosition,\n      startPanPosition,\n      startRotateCenter,\n      startRotateViewport,\n      startZoomPos,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {translationX, translationY} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: [translationX, translationY],\n      startPanEventPosition: pos\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const startPanEventPosition = this._interactiveState.startPanEventPosition || startPos;\n\n    // when the mouse starts dragging outside of this viewport, then drags over it.\n    // TODO - use interactionState flag instead\n    if (!startPanEventPosition) {\n      return this;\n    }\n\n    let [translationX, translationY] = this._interactiveState.startPanPosition || [];\n    translationX = ensureFinite(translationX, this._viewportProps.translationX);\n    translationY = ensureFinite(translationY, this._viewportProps.translationY);\n\n    const deltaX = pos[0] - startPanEventPosition[0];\n    const deltaY = pos[1] - startPanEventPosition[1];\n\n    return this._getUpdatedState({\n      translationX: translationX + deltaX,\n      translationY: translationY - deltaY\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanPos: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotateCenter: this._viewportProps.position,\n      startRotateViewport: this._viewportProps\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    // when the mouse starts dragging outside of this viewport, then drags over it.\n    // TODO - use interactionState flag instead\n    if (!this._interactiveState.startRotateCenter) {\n      return this;\n    }\n\n    const {bearing, pitch} = this._viewportProps;\n\n    return this._getUpdatedState({\n      bearing: bearing + deltaScaleX * 10,\n      pitch: pitch - deltaScaleY * 10\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotateCenter: null,\n      startRotateViewport: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPos: pos,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, minZoom, maxZoom, width, height, translationX, translationY} = this._viewportProps;\n\n    const startZoomPos = this._interactiveState.startZoomPos || startPos || pos;\n\n    const newZoom = clamp(zoom * scale, minZoom, maxZoom);\n    const deltaX = pos[0] - startZoomPos[0];\n    const deltaY = pos[1] - startZoomPos[1];\n\n    // Zoom around the center position\n    const cx = startZoomPos[0] - width / 2;\n    const cy = height / 2 - startZoomPos[1];\n    /* eslint-disable no-unused-vars */\n    const newTranslationX = cx - ((cx - translationX) * newZoom) / zoom + deltaX;\n    const newTranslationY = cy - ((cy - translationY) * newZoom) / zoom - deltaY;\n    /* eslint-enable no-unused-vars */\n\n    // return this._getUpdatedState({\n    //   position\n    //   translationX: newTranslationX,\n    //   translationY: newTranslationY\n    // });\n\n    // TODO HACK\n    return newZoom / zoom < 1 ? this.moveBackward() : this.moveForward();\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPos: null,\n      startZoom: null\n    });\n  }\n\n  moveLeft() {\n    const {bearing} = this._viewportProps;\n    const newBearing = bearing - ROTATION_STEP_DEGREES;\n    return this._getUpdatedState({\n      bearing: newBearing\n    });\n  }\n\n  moveRight() {\n    const {bearing} = this._viewportProps;\n    const newBearing = bearing + ROTATION_STEP_DEGREES;\n    return this._getUpdatedState({\n      bearing: newBearing\n    });\n  }\n\n  moveForward() {\n    const {position} = this._viewportProps;\n    const direction = this.getDirection();\n    const delta = new Vector3(direction).normalize().scale(MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  moveBackward() {\n    const {position} = this._viewportProps;\n    const direction = this.getDirection();\n    const delta = new Vector3(direction).normalize().scale(-MOVEMENT_SPEED);\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {position} = this._viewportProps;\n    const delta = [0, 0, 1];\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {position} = this._viewportProps;\n    const delta = position[2] >= 1 ? [0, 0, -1] : [0, 0, 0];\n    return this._getUpdatedState({\n      position: new Vector3(position).add(delta)\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._viewportProps.zoom + 0.2\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._viewportProps.zoom - 0.2\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new FirstPersonState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(props) {\n    super(FirstPersonState, props);\n  }\n}\n"],"file":"first-person-controller.js"}