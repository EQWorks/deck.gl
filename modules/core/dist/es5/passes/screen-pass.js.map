{"version":3,"sources":["../../../src/passes/screen-pass.js"],"names":["ScreenPass","Pass","constructor","gl","props","module","fs","id","moduleProps","model","_getModel","render","params","framebuffer","outputBuffer","clearColor","_renderPass","delete","userProps","ClipSpace","modules","uniforms","Object","assign","getUniforms","setUniforms","inputBuffer","color","draw","texture","texSize","width","height","parameters","depthWrite","depthTest"],"mappings":";;;;;;;;;AAMA;;AACA;;AAEe,MAAMA,UAAN,SAAyBC,aAAzB,CAA8B;AAC3CC,EAAAA,WAAW,CAACC,EAAD,EAAiB;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AAC1B,UAAMD,EAAN,EAAUC,KAAV;AACA,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA,EAAT;AAAaC,MAAAA,EAAb;AAAiBC,MAAAA;AAAjB,QAAgCJ,KAAtC;AACA,SAAKK,KAAL,GAAa,KAAKC,SAAL,CAAeP,EAAf,EAAmBE,MAAnB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,WAAnC,CAAb;AACD;;AAEDG,EAAAA,MAAM,CAACC,MAAD,EAAS;AACb,UAAMT,EAAE,GAAG,KAAKA,EAAhB;AAEA,4CAAeA,EAAf,EAAmB;AAACU,MAAAA,WAAW,EAAED,MAAM,CAACE,YAArB;AAAmCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA/C,KAAnB,EAAiF,MAC/E,KAAKC,WAAL,CAAiBb,EAAjB,EAAqBS,MAArB,CADF;AAGD;;AAEDK,EAAAA,MAAM,GAAG;AACP,SAAKR,KAAL,CAAWQ,MAAX;AACA,SAAKR,KAAL,GAAa,IAAb;AACD;;AAIDC,EAAAA,SAAS,CAACP,EAAD,EAAKE,MAAL,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBW,SAArB,EAAgC;AACvC,UAAMT,KAAK,GAAG,IAAIU,6BAAJ,CAAchB,EAAd,EAAkB;AAACI,MAAAA,EAAD;AAAKD,MAAAA,EAAL;AAASc,MAAAA,OAAO,EAAE,CAACf,MAAD;AAAlB,KAAlB,CAAd;AAEA,UAAMgB,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAclB,MAAM,CAACmB,WAAP,EAAd,EAAoCnB,MAAM,CAACmB,WAAP,CAAmBN,SAAnB,CAApC,CAAjB;AAEAT,IAAAA,KAAK,CAACgB,WAAN,CAAkBJ,QAAlB;AACA,WAAOZ,KAAP;AACD;;AAQDO,EAAAA,WAAW,CAACb,EAAD,QAAkC;AAAA,QAA7B;AAACuB,MAAAA,WAAD;AAAcZ,MAAAA;AAAd,KAA6B;AAC3C,mCAAMX,EAAN,EAAU;AAACwB,MAAAA,KAAK,EAAE;AAAR,KAAV;AACA,SAAKlB,KAAL,CAAWmB,IAAX,CAAgB;AACdP,MAAAA,QAAQ,EAAE;AACRQ,QAAAA,OAAO,EAAEH,WADD;AAERI,QAAAA,OAAO,EAAE,CAACJ,WAAW,CAACK,KAAb,EAAoBL,WAAW,CAACM,MAAhC;AAFD,OADI;AAKdC,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE,KADF;AAEVC,QAAAA,SAAS,EAAE;AAFD;AALE,KAAhB;AAUD;;AAjD0C","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport { ClipSpace, withParameters, clear } from 'kepler-outdated-luma.gl-core';\nimport Pass from './pass';\n\nexport default class ScreenPass extends Pass {\n  constructor(gl, props = {}) {\n    super(gl, props);\n    const {module, fs, id, moduleProps} = props;\n    this.model = this._getModel(gl, module, fs, id, moduleProps);\n  }\n\n  render(params) {\n    const gl = this.gl;\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private method\n\n  _getModel(gl, module, fs, id, userProps) {\n    const model = new ClipSpace(gl, {id, fs, modules: [module]});\n\n    const uniforms = Object.assign(module.getUniforms(), module.getUniforms(userProps));\n\n    model.setUniforms(uniforms);\n    return model;\n  }\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target\n   */\n  _renderPass(gl, {inputBuffer, outputBuffer}) {\n    clear(gl, {color: true});\n    this.model.draw({\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"],"file":"screen-pass.js"}