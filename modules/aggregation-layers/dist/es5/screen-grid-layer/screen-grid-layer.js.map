{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["count","experimental","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","defaultColorRange","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","ScreenGridLayer","Layer","getShaders","shaders","context","gl","vs","fs","vs_WebGL1","fs_WebGL1","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","id","shaderCache","maxBuffer","_getMaxCountBuffer","weights","color","operation","AGGREGATION_OPERATION","SUM","needMax","setState","model","_getModel","gpuGridAggregator","GPUGridAggregator","_setupUniformBuffer","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","_updateAggregation","finalizeState","aggregationBuffer","state","delete","draw","uniforms","parameters","props","minColor","maxColor","cellScale","shouldUseMinMax","maxWeight","layerUniforms","bind","target","Object","assign","depthTest","depthMask","unbind","attribute","numInstances","width","height","viewport","numCol","i","x","y","Math","floor","buffer","getPickingInfo","info","mode","index","aggregationResults","getData","object","getAggregationData","pixelIndex","oldProps","cellSizeChanged","viewportChanged","Model","geometry","Geometry","drawMode","attributes","positions","Float32Array","isInstanced","Buffer","byteLength","data","pointCount","Float64Array","colorWeights","iterable","objectInfo","weight","Array","isArray","values","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","_shouldUseMinMax","log","deprecated","_updateGridParams","invalidateAll","toUpperCase","projectPoints","gridTransformMatrix","WebMercatorViewport","pixelProjectionMatrix","results","run","cellSize","useGPU","maxData","Number","isFinite","invalidate","newState","some","key","margin","ceil","numRow","dataBytes","divisor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { Layer, WebMercatorViewport, createIterable, log, experimental } from 'kepler-outdated-deck.gl-core';\nconst {count} = experimental;\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION} from '../utils/aggregation-operation-utils';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Buffer, isWebGL2} from '@luma.gl/core';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => [1, 0, 0]},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    const shaders = isWebGL2(this.context.gl) ? {vs, fs} : {vs: vs_WebGL1, fs: fs_WebGL1};\n    shaders.modules = ['picking'];\n    return shaders;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n    /* eslint-disable max-len */\n\n    const options = {\n      id: `${this.id}-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    const maxBuffer = this._getMaxCountBuffer(gl);\n    const weights = {\n      color: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxBuffer\n      }\n    };\n    this.setState({\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      maxBuffer,\n      weights\n    });\n\n    this._setupUniformBuffer();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      this._updateAggregation(changeFlags);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    const {aggregationBuffer, maxBuffer, gpuGridAggregator} = this.state;\n    gpuGridAggregator.delete();\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n    if (maxBuffer) {\n      maxBuffer.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    const {gl} = this.context;\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be deduced from aggregated buffer in the vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, maxBuffer, cellScale, shouldUseMinMax, colorRange, maxWeight} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    if (isWebGL2(gl)) {\n      maxBuffer.bind({target: GL.UNIFORM_BUFFER});\n    } else {\n      layerUniforms.maxWeight = maxWeight;\n    }\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n    if (isWebGL2(gl)) {\n      maxBuffer.unbind();\n    }\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {aggregationBuffer} = this.state;\n    attribute.update({\n      buffer: aggregationBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator} = this.state;\n      // Get color aggregation results\n      const aggregationResults = gpuGridAggregator.getData('color');\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData(\n        Object.assign({pixelIndex: index}, aggregationResults)\n      );\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  // Creates and returns a Uniform Buffer object to hold maxCount value.\n  _getMaxCountBuffer(gl) {\n    return new Buffer(gl, {\n      byteLength: 4 * 4, // Four floats\n      index: AGGREGATION_DATA_UBO_INDEX,\n      accessor: {\n        size: 4\n      }\n    });\n  }\n\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition, getWeight} = this.props;\n    const pointCount = count(data);\n    const positions = new Float64Array(pointCount * 2);\n    const colorWeights = new Float32Array(pointCount * 3);\n    const {weights} = this.state;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      const weight = getWeight(object, objectInfo);\n      const {index} = objectInfo;\n\n      positions[index * 2] = position[0];\n      positions[index * 2 + 1] = position[1];\n\n      if (Array.isArray(weight)) {\n        colorWeights[index * 3] = weight[0];\n        colorWeights[index * 3 + 1] = weight[1];\n        colorWeights[index * 3 + 2] = weight[2];\n      } else {\n        // backward compitability\n        colorWeights[index * 3] = weight;\n      }\n    }\n    weights.color.values = colorWeights;\n    this.setState({positions});\n  }\n\n  // Set a binding point for the aggregation uniform block index\n  _setupUniformBuffer() {\n    const gl = this.context.gl;\n    // For WebGL1, uniform buffer is not used.\n    if (!isWebGL2(gl)) {\n      return;\n    }\n    const programHandle = this.state.model.program.handle;\n\n    // TODO: Replace with luma.gl api when ready.\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this._updateGridParams();\n      attributeManager.invalidateAll();\n    }\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights} = this.state;\n    const {viewport} = this.context;\n\n    weights.color.operation =\n      AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n\n    let projectPoints = false;\n    let gridTransformMatrix = null;\n\n    if (this.context.viewport instanceof WebMercatorViewport) {\n      // project points from world space (lng/lat) to viewport (screen) space.\n      projectPoints = true;\n    } else {\n      projectPoints = false;\n      // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n      gridTransformMatrix = viewport.pixelProjectionMatrix;\n    }\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints,\n      gridTransformMatrix\n    });\n\n    const maxWeight =\n      results.color.maxData && Number.isFinite(results.color.maxData[0])\n        ? results.color.maxData[0]\n        : 0;\n\n    this.setState({\n      maxWeight // uniform to use under WebGL1\n    });\n\n    attributeManager.invalidate('instanceCounts');\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      newState.colorRange = colorRangeToFlatArray(props.colorRange, Float32Array, 255);\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let aggregationBuffer = this.state.aggregationBuffer;\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n\n    aggregationBuffer = new Buffer(gl, {\n      byteLength: dataBytes,\n      accessor: {\n        size: 4,\n        type: GL.FLOAT,\n        divisor: 1\n      }\n    });\n    this.state.weights.color.aggregationBuffer = aggregationBuffer;\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      aggregationBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}