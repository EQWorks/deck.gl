{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64Utils","BUFFER_NAMES","ARRAY_BUFFER_MAP","maxData","minData","maxMinData","GPUGridAggregator","getAggregationData","aggregationData","pixelIndex","index","PIXEL_SIZE","results","cellCount","cellWeight","maxCellWieght","minCellWeight","totalCount","getCellData","countsData","size","numCells","length","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","isSupported","gl","FEATURES","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","constructor","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","fp64","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","resources","_hasGPUSupport","delete","gridAggregationModel","allAggregationModel","meanTransform","deleteResources","run","setState","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","log","info","runAggregationOnCPU","getData","weightId","data","aggregationBuffer","arrayName","bufferName","Array","isArray","forEach","obj","name","Object","assign","DEFAULT_RUN_PARAMS","gridTransformMatrix","viewport","projectPoints","changeFlags","DEFAULT_CHANGE_FLAGS","cellSizeChanged","validateProps","viewportMatrix","IDENTITY_MATRIX","normalizeWeightParams","result","DEFAULT_WEIGHT_PARAMS","updateObject","shouldTransformToGrid","dataChanged","viewportChanged","width","height","Math","ceil","assert","positions","projectPositions","warn","calculateAggregationData","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","WEIGHT_SIZE","AGGREGATION_OPERATION","SUM","MEAN","MIN","min","MAX","max","calculateMeanMaxMinData","validCellIndices","needMin","needMax","calculateMinMax","calculateMean","combineMaxMin","count","ELEMENTCOUNT","weight","initCPUResults","aggregationSize","fill","Infinity","gridTransformRequired","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","updateAggregationBuffers","updateCPUResultBuffer","resourceName","setData","Buffer","createBufferObjects","getAggregateData","aggregationTexture","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","trackGPUResultBuffers","getAggregationModel","Model","vs","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","drawMode","getAllAggregationModel","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","isInstanced","instanceCount","attributes","position","getMeanTransform","update","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying","renderAggregateData","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","attach","updateModels","setupFramebuffers","framebufferSize","resize","EQUATION_MAP","setupModels","setupWeightAttributes","typedArray","positions64xyLow","aggregationModelAttributes","modelDirty","accessor","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from 'kepler-outdated-luma.gl-constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from 'kepler-outdated-luma.gl-core';\nimport { log } from 'kepler-outdated-deck.gl-core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\nimport {AGGREGATION_OPERATION} from '../aggregation-operation-utils';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {getFloatTexture, getFramebuffer, getFloatArray} from './gpu-grid-aggregator-utils.js';\n\nconst BUFFER_NAMES = ['aggregationBuffer', 'maxMinBuffer', 'minBuffer', 'maxBuffer'];\nconst ARRAY_BUFFER_MAP = {\n  maxData: 'maxBuffer',\n  minData: 'minBuffer',\n  maxMinData: 'maxMinBuffer'\n};\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, minData, maxMinData, pixelIndex}) {\n    const index = pixelIndex * PIXEL_SIZE;\n    const results = {};\n    if (aggregationData) {\n      results.cellCount = aggregationData[index + 3];\n      results.cellWeight = aggregationData[index];\n    }\n    if (maxMinData) {\n      results.maxCellWieght = maxMinData[0];\n      results.minCellWeight = maxMinData[3];\n    } else {\n      if (maxData) {\n        results.maxCellWieght = maxData[0];\n        results.totalCount = maxData[3];\n      }\n      if (minData) {\n        results.minCellWeight = minData[0];\n        results.totalCount = maxData[3];\n      }\n    }\n    return results;\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  static isSupported(gl) {\n    return (\n      isWebGL2(gl) &&\n      hasFeatures(\n        gl,\n        FEATURES.BLEND_EQUATION_MINMAX,\n        FEATURES.COLOR_ATTACHMENT_RGBA32F,\n        FEATURES.TEXTURE_FLOAT\n      )\n    );\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer, limit = 10}) {\n  //   if (aggregationBuffer) {\n  //     console.log('Aggregation Data:');\n  //     const agrData = aggregationBuffer.getData();\n  //     for (let index = 0; index < agrData.length && limit > 0; index += 4) {\n  //       if (agrData[index + 3] > 0) {\n  //         console.log(\n  //           `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //             agrData[index + 2]\n  //           } count: ${agrData[index + 3]}`\n  //         );\n  //         limit--;\n  //       }\n  //     }\n  //   }\n  //   const obj = {minBuffer, maxBuffer, maxMinBuffer};\n  //   for (const key in obj) {\n  //     if (obj[key]) {\n  //       const data = obj[key].getData();\n  //       console.log(`${key} data : R: ${data[0]} G: ${data[1]} B: ${data[2]} A: ${data[3]}`);\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {},\n\n      // common resources to be deleted\n      resources: {},\n\n      // results\n      results: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      positions64xyLowBuffer,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    positions64xyLowBuffer && positions64xyLowBuffer.delete();\n    this.deleteResources([\n      framebuffers,\n      textures,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      resources\n    ]);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    // reset results\n    this.setState({results: {}});\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.info('GPUGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // Reads aggregation data into JS Array object\n  // For WebGL1, data is available in JS Array objects already.\n  // For WebGL2, data is read from Buffer objects and cached for subsequent queries.\n  getData(weightId) {\n    const data = {};\n    const results = this.state.results;\n    if (!results[weightId].aggregationData) {\n      // cache the results if reading from the buffer (WebGL2 path)\n      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();\n    }\n    data.aggregationData = results[weightId].aggregationData;\n\n    // Check for optional results\n    for (const arrayName in ARRAY_BUFFER_MAP) {\n      const bufferName = ARRAY_BUFFER_MAP[arrayName];\n\n      if (results[weightId][arrayName] || results[weightId][bufferName]) {\n        // cache the result\n        results[weightId][arrayName] =\n          results[weightId][arrayName] || results[weightId][bufferName].getData();\n        data[arrayName] = results[weightId][arrayName];\n      }\n    }\n    return data;\n  }\n\n  // PRIVATE\n\n  deleteResources(resources) {\n    resources = Array.isArray(resources) ? resources : [resources];\n    resources.forEach(obj => {\n      for (const name in obj) {\n        obj[name].delete();\n      }\n    });\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport is needed only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n\n    this.setState({results});\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateCPUResultBuffer({gl, bufferName, id, data, result}) {\n    const {resources} = this.state;\n    const resourceName = `cpu-result-${id}-${bufferName}`;\n    result[bufferName] = result[bufferName] || resources[resourceName];\n    if (result[bufferName]) {\n      result[bufferName].setData({data});\n    } else {\n      // save resource for garbage collection\n      resources[resourceName] = new Buffer(gl, data);\n      result[bufferName] = resources[resourceName];\n    }\n  }\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.updateCPUResultBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        id,\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        this.updateCPUResultBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          id,\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          this.updateCPUResultBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            id,\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          this.updateCPUResultBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            id,\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    this.trackGPUResultBuffers(results, weights);\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel() {\n    const {gl, shaderCache} = this;\n    const {numCol, numRow} = this.state;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: numCol * numRow,\n      attributes: {\n        position: [0, 0]\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    const results = this.getAggregateData(opts);\n    this.setState({results});\n    return results;\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      resources,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          if (!maxMinFramebuffers[id]) {\n            resources[`${id}-maxMin`] = getFloatTexture(this.gl, {id: `${id}-maxMinTex`});\n            maxMinFramebuffers[id] = getFramebuffer(this.gl, {\n              id: `${id}-maxMinFb`,\n              texture: resources[`${id}-maxMin`]\n            });\n          }\n        } else {\n          if (needMin) {\n            if (!minFramebuffers[id]) {\n              resources[`${id}-min`] = getFloatTexture(this.gl, {id: `${id}-minTex`});\n              minFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-minFb`,\n                texture: resources[`${id}-min`]\n              });\n            }\n          }\n          if (needMax) {\n            if (!maxFramebuffers[id]) {\n              resources[`${id}-max`] = getFloatTexture(this.gl, {id: `${id}-maxTex`});\n              maxFramebuffers[id] = getFramebuffer(this.gl, {\n                id: `${id}-maxFb`,\n                texture: resources[`${id}-max`]\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (!this.allAggregationModel) {\n      // Model doesn't have to change when fp64 flag changes\n      this.allAggregationModel = this.getAllAggregationModel();\n    }\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights, resources} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          resources[`${id}-buffer`] = new Buffer(this.gl, typedArray);\n          weightAttributes[id] = resources[`${id}-buffer`];\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  // GPU Aggregation results are provided in Buffers, if new Buffer objects are created track them for later deletion.\n  /* eslint-disable max-depth */\n  trackGPUResultBuffers(results, weights) {\n    const {resources} = this.state;\n    for (const id in results) {\n      if (results[id]) {\n        for (const bufferName of BUFFER_NAMES) {\n          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {\n            // No result buffer is provided in weights object, `readPixelsToBuffer` has created a new Buffer object\n            // collect the new buffer for garabge collection\n            const name = `gpu-result-${id}-${bufferName}`;\n            if (resources[name]) {\n              resources[name].delete();\n            }\n            resources[name] = results[id][bufferName];\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable max-depth */\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n    const aggregationModelAttributes = {};\n    let modelDirty = false;\n\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      modelDirty = true;\n    }\n\n    if (changeFlags.dataChanged || !this.state.positionsBuffer) {\n      let {positionsBuffer, positions64xyLowBuffer} = this.state;\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      positions64xyLowBuffer = new Buffer(gl, {\n        data: new Float32Array(positions64xyLow),\n        accessor: {size: 2}\n      });\n      this.setState({positionsBuffer, positions64xyLowBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      modelDirty = true;\n    }\n\n    if (modelDirty) {\n      const {vertexCount, positionsBuffer, positions64xyLowBuffer} = this.state;\n      aggregationModelAttributes.positions = positionsBuffer;\n      if (opts.fp64) {\n        aggregationModelAttributes.positions64xyLow = positions64xyLowBuffer;\n      }\n      this.gridAggregationModel.setVertexCount(vertexCount);\n      this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n    }\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}