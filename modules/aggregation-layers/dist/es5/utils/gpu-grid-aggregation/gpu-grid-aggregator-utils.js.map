{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator-utils.js"],"names":["getFloatTexture","gl","opts","width","height","texture","Texture2D","data","format","type","border","mipmaps","parameters","dataFormat","getFramebuffer","id","fb","Framebuffer","attachments","getFloatArray","array","size","fillValue","length","Float32Array","fill"],"mappings":";;;;;;;;;AAEA;;AAEO,SAASA,eAAT,CAAyBC,EAAzB,EAA6BC,IAA7B,EAAmC;AACxC,QAAM;AAACC,IAAAA,KAAK,GAAG,CAAT;AAAYC,IAAAA,MAAM,GAAG;AAArB,MAA0BF,IAAhC;AACA,QAAMG,OAAO,GAAG,IAAIC,6BAAJ,CAAcL,EAAd,EAAkB;AAChCM,IAAAA,IAAI,EAAE,IAD0B;AAEhCC,IAAAA,MAAM,OAF0B;AAGhCC,IAAAA,IAAI,MAH4B;AAIhCC,IAAAA,MAAM,EAAE,CAJwB;AAKhCC,IAAAA,OAAO,EAAE,KALuB;AAMhCC,IAAAA,UAAU,EAAE;AACV,mBADU;AAEV;AAFU,KANoB;AAUhCC,IAAAA,UAAU,MAVsB;AAWhCV,IAAAA,KAXgC;AAYhCC,IAAAA;AAZgC,GAAlB,CAAhB;AAcA,SAAOC,OAAP;AACD;;AAEM,SAASS,cAAT,CAAwBb,EAAxB,EAA4BC,IAA5B,EAAkC;AACvC,QAAM;AAACa,IAAAA,EAAD;AAAKZ,IAAAA,KAAK,GAAG,CAAb;AAAgBC,IAAAA,MAAM,GAAG,CAAzB;AAA4BC,IAAAA;AAA5B,MAAuCH,IAA7C;AACA,QAAMc,EAAE,GAAG,IAAIC,+BAAJ,CAAgBhB,EAAhB,EAAoB;AAC7Bc,IAAAA,EAD6B;AAE7BZ,IAAAA,KAF6B;AAG7BC,IAAAA,MAH6B;AAI7Bc,IAAAA,WAAW,EAAE;AACX,eAAwBb;AADb;AAJgB,GAApB,CAAX;AASA,SAAOW,EAAP;AACD;;AAEM,SAASG,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAmD;AAAA,MAAfC,SAAe,uEAAH,CAAG;;AACxD,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAAN,GAAeF,IAA7B,EAAmC;AACjC,WAAO,IAAIG,YAAJ,CAAiBH,IAAjB,EAAuBI,IAAvB,CAA4BH,SAA5B,CAAP;AACD;;AACD,SAAOF,KAAP;AACD","sourcesContent":["// Helper methods used by GPUGridAggregator.\nimport GL from 'kepler-outdated-luma.gl-constants';\nimport { Framebuffer, Texture2D } from 'kepler-outdated-luma.gl-core';\n\nexport function getFloatTexture(gl, opts) {\n  const {width = 1, height = 1} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA,\n    width,\n    height\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1, texture} = opts;\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n"],"file":"gpu-grid-aggregator-utils.js"}