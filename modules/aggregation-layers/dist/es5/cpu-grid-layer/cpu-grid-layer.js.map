{"version":3,"sources":["../../../src/cpu-grid-layer/cpu-grid-layer.js"],"names":["nop","defaultMaterial","PhongMaterial","defaultProps","colorDomain","colorRange","defaultColorRange","getColorValue","type","value","getColorWeight","x","colorAggregation","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","cellSize","coverage","getPosition","position","extruded","fp64","material","COLOR_PROPS","ELEVATION_PROPS","CPUGridLayer","CompositeLayer","initializeState","state","layerData","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","updateState","oldProps","props","changeFlags","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","dataChanged","getLayerData","dimensionChanges","getDimensionChanges","forEach","f","apply","colorElevationPropsChanged","colorChanged","elevationChanged","p","setState","updateTriggersChanged","all","getFillColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","length","getPickingInfo","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","getUpdateTriggers","updateTriggers","step","prop","data","getSortedBins","getValueDomain","BinSorter","getValueRange","_onGetSublayerColor","cv","isColorValueInDomain","color","Number","isFinite","_onGetSublayerElevation","ev","isElevationValueInDomain","renderLayers","transitions","SubLayerClass","getSubLayerClass","GridCellLayer","bind","getSubLayerProps","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { PhongMaterial } from 'kepler-outdated-luma.gl-core';\nimport { CompositeLayer } from 'kepler-outdated-deck.gl-core';\nimport { GridCellLayer } from 'kepler-outdated-deck.gl-layers';\n\nimport BinSorter from '../utils/bin-sorter';\nimport {defaultColorRange} from '../utils/color-utils';\nimport {getQuantizeScale, getLinearScale} from '../utils/scale-utils';\nimport {pointToDensityGridDataCPU} from './grid-aggregator';\nimport {getValueFunc} from '../utils/aggregation-operation-utils';\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: null}, // default value is calcuated from `getColorWeight` and `colorAggregation`\n  getColorWeight: {type: 'accessor', value: x => 1},\n  colorAggregation: 'SUM',\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: null}, // default value is calcuated from `getElevationWeight` and `elevationAggregation`\n  getElevationWeight: {type: 'accessor', value: x => 1},\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nconst COLOR_PROPS = ['getColorValue', 'colorAggregation', 'getColorWeight'];\nconst ELEVATION_PROPS = ['getElevationValue', 'elevationAggregation', 'getElevationWeight'];\n\nexport default class CPUGridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerData: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    this.updateGetValueFuncs(oldProps, props);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedBins\n      this.getLayerData();\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  colorElevationPropsChanged(oldProps, props) {\n    let colorChanged = false;\n    let elevationChanged = false;\n    for (const p of COLOR_PROPS) {\n      if (oldProps[p] !== props[p]) {\n        colorChanged = true;\n      }\n    }\n    for (const p of ELEVATION_PROPS) {\n      if (oldProps[p] !== props[p]) {\n        elevationChanged = true;\n      }\n    }\n    return {colorChanged, elevationChanged};\n  }\n\n  updateGetValueFuncs(oldProps, props) {\n    let {getColorValue, getElevationValue} = props;\n    const {colorAggregation, getColorWeight, elevationAggregation, getElevationWeight} = this.props;\n    const {colorChanged, elevationChanged} = this.colorElevationPropsChanged(oldProps, props);\n\n    if (colorChanged && getColorValue === null) {\n      // If `getColorValue` is not provided, build it.\n      getColorValue = getValueFunc(colorAggregation, getColorWeight);\n    }\n    if (elevationChanged && getElevationValue === null) {\n      // If `getElevationValue` is not provided, build it.\n      getElevationValue = getValueFunc(elevationAggregation, getElevationWeight);\n    }\n    if (getColorValue) {\n      this.setState({getColorValue});\n    }\n    if (getElevationValue) {\n      this.setState({getElevationValue});\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      oldProps.cellSize !== props.cellSize ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getFillColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue', 'getColorWeight', 'colorAggregation'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue', 'getElevationWeight', 'elevationAggregation'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getLayerData() {\n    const {data, cellSize, getPosition} = this.props;\n    const {layerData} = pointToDensityGridDataCPU(data, cellSize, getPosition);\n\n    this.setState({layerData});\n    this.getSortedBins();\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.state;\n    const sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.state;\n    const sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {elevationScale, fp64, extruded, cellSize, coverage, material, transitions} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getFillColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getFillColor: transitions.getColorValue || transitions.getColorWeight,\n          getElevation: transitions.getElevationValue || transitions.getElevationWeight\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.layerData\n      }\n    );\n  }\n}\n\nCPUGridLayer.layerName = 'CPUGridLayer';\nCPUGridLayer.defaultProps = defaultProps;\n"],"file":"cpu-grid-layer.js"}