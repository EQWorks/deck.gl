{"version":3,"sources":["../../../src/point-cloud-layer/point-cloud-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","DEFAULT_NORMAL","defaultMaterial","PhongMaterial","defaultProps","sizeUnits","pointSize","type","min","value","getPosition","x","position","getNormal","getColor","material","radiusPixels","deprecatedFor","PointCloudLayer","Layer","getShaders","id","projectModule","use64bitProjection","vs","fs","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceNormals","defaultValue","instanceColors","updateState","props","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","draw","uniforms","viewport","sizeMultiplier","distanceScales","pixelsPerMeter","setUniforms","Object","assign","positions","i","angle","Math","PI","push","cos","sin","Model","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","shaderCache","attribute","startRow","endRow","isFP64","use64bitPositions","constant","data","iterable","objectInfo","object","index","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { Layer, createIterable } from 'kepler-outdated-deck.gl-core';\nimport GL from 'kepler-outdated-luma.gl-constants';\nimport { Model, Geometry, fp64, PhongMaterial } from 'kepler-outdated-luma.gl-core';\nconst {fp64LowPart} = fp64;\n\nimport vs from './point-cloud-layer-vertex.glsl';\nimport fs from './point-cloud-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst DEFAULT_NORMAL = [0, 0, 1];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  sizeUnits: 'pixels',\n  pointSize: {type: 'number', min: 0, value: 10}, //  point radius in pixels\n  fp64: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getNormal: {type: 'accessor', value: DEFAULT_NORMAL},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: defaultMaterial,\n\n  // Depreated\n  radiusPixels: {deprecatedFor: 'pointSize'}\n};\n\nexport default class PointCloudLayer extends Layer {\n  getShaders(id) {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'gouraud-lighting', 'picking']};\n  }\n\n  initializeState() {\n    /* eslint-disable max-len */\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceNormals: {\n        size: 3,\n        transition: true,\n        accessor: 'getNormal',\n        defaultValue: DEFAULT_NORMAL\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {pointSize, sizeUnits} = this.props;\n\n    const sizeMultiplier = sizeUnits === 'meters' ? viewport.distanceScales.pixelsPerMeter[2] : 1;\n\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          radiusPixels: pointSize * sizeMultiplier\n        })\n      )\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a triangle that minimally cover the unit circle\n    const positions = [];\n    for (let i = 0; i < 3; i++) {\n      const angle = (i / 3) * Math.PI * 2;\n      positions.push(Math.cos(angle) * 2, Math.sin(angle) * 2, 0);\n    }\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute, {startRow, endRow}) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nPointCloudLayer.layerName = 'PointCloudLayer';\nPointCloudLayer.defaultProps = defaultProps;\n"],"file":"point-cloud-layer.js"}