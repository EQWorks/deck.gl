{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"names":["Tesselator","experimental","fp64LowPart","fp64Module","PolygonTesselator","constructor","data","getGeometry","fp64","positionFormat","IndexType","Uint32Array","attributes","positions","size","positions64xyLow","fp64Only","vertexValid","type","Uint8ClampedArray","indices","get","attributeName","subarray","vertexCount","getGeometrySize","polygon","Polygon","getVertexCount","positionSize","updateGeometryAttributes","context","normalize","geometrySize","_updateIndices","_updatePositions","geometryIndex","vertexStart","offset","indexStart","indexLayout","typedArrayManager","target","currentLength","length","i","getSurfaceIndices","allocate","copy","j","polygonPositions","holeIndices","x","y","z"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport { experimental } from 'kepler-outdated-deck.gl-core';\nconst {Tesselator} = experimental;\nimport { fp64 as fp64Module } from 'kepler-outdated-luma.gl-core';\nconst {fp64LowPart} = fp64Module;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator {\n  constructor({data, getGeometry, fp64, positionFormat, IndexType = Uint32Array}) {\n    super({\n      data,\n      getGeometry,\n      fp64,\n      positionFormat,\n      attributes: {\n        positions: {size: 3},\n        positions64xyLow: {size: 2, fp64Only: true},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /* Getters */\n  get(attributeName) {\n    if (attributeName === 'indices') {\n      return this.attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(polygon) {\n    return Polygon.getVertexCount(polygon, this.positionSize);\n  }\n\n  updateGeometryAttributes(polygon, context) {\n    polygon = Polygon.normalize(polygon, this.positionSize, context.geometrySize);\n\n    this._updateIndices(polygon, context);\n    this._updatePositions(polygon, context);\n  }\n\n  // Flatten the indices array\n  _updateIndices(polygon, {geometryIndex, vertexStart: offset, indexStart}) {\n    const {attributes, indexLayout, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    let currentLength = target.length;\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize);\n\n    // make sure the buffer is large enough\n    if (currentLength < i + indices.length) {\n      currentLength = (i + indices.length) * 2;\n      target = typedArrayManager.allocate(target, currentLength, {\n        type: target.constructor,\n        size: 1,\n        copy: true\n      });\n    }\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexLayout[geometryIndex] = indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  _updatePositions(polygon, {vertexStart, geometrySize}) {\n    const {\n      attributes: {positions, positions64xyLow, vertexValid},\n      fp64,\n      positionSize\n    } = this;\n\n    let i = vertexStart;\n    const {positions: polygonPositions, holeIndices} = polygon;\n\n    for (let j = 0; j < geometrySize; j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n      if (fp64) {\n        positions64xyLow[i * 2] = fp64LowPart(x);\n        positions64xyLow[i * 2 + 1] = fp64LowPart(y);\n      }\n      vertexValid[i] = 1;\n      i++;\n    }\n\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n"],"file":"polygon-tesselator.js"}