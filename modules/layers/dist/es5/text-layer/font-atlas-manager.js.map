{"version":3,"sources":["../../../src/text-layer/font-atlas-manager.js"],"names":["getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_CLAMP_TO_EDGE","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","cache","LRUCache","VALID_PROPS","getNewChars","key","characterSet","cachedFontAtlas","get","newChars","cachedMapping","mapping","cachedCharSet","Object","keys","Set","Array","forEach","char","has","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontSize","fontWeight","font","fillStyle","textBaseline","textAlign","FontAtlasManager","constructor","gl","props","buffer","sdf","cutoff","radius","_key","_texture","Texture2D","finalize","delete","texture","scale","setProps","prop","oldKey","_getKey","_updateTexture","fontAtlas","_generateFontAtlas","set","canvas","width","height","resize","setImageData","parameters","generateMipmap","document","createElement","getContext","canvasHeight","xOffset","yOffset","assign","getFontWidth","measureText","fontHeight","maxCanvasWidth","getImageData","putImageData","tinySDF","TinySDF","size","draw","x","y","fillText"],"mappings":"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","sourcesContent":["/* global document */\n\nimport { Texture2D } from 'kepler-outdated-luma.gl-core';\nimport TinySDF from '@mapbox/tiny-sdf';\nimport GL from 'kepler-outdated-luma.gl-constants';\n\nimport {buildMapping} from './font-atlas-utils';\nimport LRUCache from './lru-cache';\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\nexport const DEFAULT_FONT_SIZE = 64;\nexport const DEFAULT_BUFFER = 2;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 3;\n\nconst GL_TEXTURE_WRAP_S = 0x2802;\nconst GL_TEXTURE_WRAP_T = 0x2803;\nconst GL_CLAMP_TO_EDGE = 0x812f;\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\n/**\n * [key]: {\n *   xOffset, // x position of last character in mapping\n *   yOffset, // y position of last character in mapping\n *   mapping, // x, y coordinate of each character in shared `fontAtlas`\n *   data, // canvas\n *   width. // canvas.width,\n *   height, // canvas.height\n * }\n *\n */\nconst cache = new LRUCache(CACHE_LIMIT);\n\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius'\n];\n\n/**\n * get all the chars not in cache\n * @param key cache key\n * @param characterSet (Array|Set)\n * @returns {Array} chars not in cache\n */\nfunction getNewChars(key, characterSet) {\n  const cachedFontAtlas = cache.get(key);\n  if (!cachedFontAtlas) {\n    return characterSet;\n  }\n\n  const newChars = [];\n  const cachedMapping = cachedFontAtlas.mapping;\n  let cachedCharSet = Object.keys(cachedMapping);\n  cachedCharSet = new Set(cachedCharSet);\n\n  let charSet = characterSet;\n  if (charSet instanceof Array) {\n    charSet = new Set(charSet);\n  }\n\n  charSet.forEach(char => {\n    if (!cachedCharSet.has(char)) {\n      newChars.push(char);\n    }\n  });\n\n  return newChars;\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nexport default class FontAtlasManager {\n  constructor(gl) {\n    this.gl = gl;\n\n    // font settings\n    this.props = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      // sdf only props\n      // https://github.com/mapbox/tiny-sdf\n      sdf: false,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS\n    };\n\n    // key is used for caching generated fontAtlas\n    this._key = null;\n    this._texture = new Texture2D(this.gl);\n  }\n\n  finalize() {\n    this._texture.delete();\n  }\n\n  get texture() {\n    return this._texture;\n  }\n\n  get mapping() {\n    const data = cache.get(this._key);\n    return data && data.mapping;\n  }\n\n  get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  setProps(props = {}) {\n    VALID_PROPS.forEach(prop => {\n      if (prop in props) {\n        this.props[prop] = props[prop];\n      }\n    });\n\n    // update cache key\n    const oldKey = this._key;\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      if (this._key !== oldKey) {\n        this._updateTexture(cachedFontAtlas);\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(this._key, charSet, cachedFontAtlas);\n    this._updateTexture(fontAtlas);\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  _updateTexture({data: canvas, width, height}) {\n    // resize texture\n    if (this._texture.width !== width || this._texture.height !== height) {\n      this._texture.resize({width, height});\n    }\n\n    // update image data\n    this._texture.setImageData({\n      data: canvas,\n      width,\n      height,\n      parameters: {\n        [GL_TEXTURE_WRAP_S]: GL_CLAMP_TO_EDGE,\n        [GL_TEXTURE_WRAP_T]: GL_CLAMP_TO_EDGE,\n        [GL.UNPACK_FLIP_Y_WEBGL]: true\n      }\n    });\n\n    // this is required step after texture data changed\n    this._texture.generateMipmap();\n  }\n\n  _generateFontAtlas(key, characterSet, cachedFontAtlas) {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d');\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping(\n      Object.assign(\n        {\n          getFontWidth: char => ctx.measureText(char).width,\n          fontHeight: fontSize * HEIGHT_SCALE,\n          buffer,\n          characterSet,\n          maxCanvasWidth: MAX_CANVAS_WIDTH\n        },\n        cachedFontAtlas && {\n          mapping: cachedFontAtlas.mapping,\n          xOffset: cachedFontAtlas.xOffset,\n          yOffset: cachedFontAtlas.yOffset\n        }\n      )\n    );\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y - buffer);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  _getKey() {\n    const {gl, fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${gl} ${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${gl} ${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n"],"file":"font-atlas-manager.js"}