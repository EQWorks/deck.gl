{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultMaterial","PhongMaterial","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","material","PolygonLayer","CompositeLayer","initializeState","state","paths","updateState","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","_getPaths","getPickingInfo","info","Object","assign","object","data","positionFormat","positionSize","iterable","objectInfo","index","positions","holeIndices","Polygon","normalize","i","length","path","subarray","push","_getAccessor","accessor","x","renderLayers","transitions","updateTriggers","FillLayer","getSubLayerClass","SolidPolygonLayer","StrokeLayer","PathLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getWidth","getColor","getPath","getDashArray","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { PhongMaterial } from 'kepler-outdated-luma.gl-core';\nimport { CompositeLayer, createIterable } from 'kepler-outdated-deck.gl-core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged) {\n      this.state.paths = this._getPaths(props);\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked data\n      object: (info.object && info.object.object) || info.object\n    });\n  }\n\n  _getPaths({data, getPolygon, positionFormat}) {\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const {positions, holeIndices} = Polygon.normalize(\n        getPolygon(object, objectInfo),\n        positionSize\n      );\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.subarray(\n            holeIndices[i - 1] || 0,\n            holeIndices[i] || positions.length\n          );\n          paths.push({path, object});\n        }\n      } else {\n        paths.push({path: positions, object});\n      }\n    }\n    return paths;\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {data, stroked, filled, extruded, wireframe, elevationScale, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          extruded,\n          elevationScale,\n\n          fp64,\n          filled,\n          wireframe,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          fp64,\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this._getAccessor(getLineColor),\n          getWidth: this._getAccessor(getLineWidth),\n          getDashArray: this._getAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}