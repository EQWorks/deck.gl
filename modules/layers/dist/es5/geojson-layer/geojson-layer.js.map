{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["defaultLineColor","defaultFillColor","defaultMaterial","PhongMaterial","defaultProps","stroked","filled","extruded","wireframe","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","lineDashJustified","fp64","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getLineDashArray","getElevation","material","getCoordinates","f","geometry","coordinates","unwrappingAccessor","accessor","feature","GeoJsonLayer","CompositeLayer","initializeState","state","features","updateState","oldProps","props","changeFlags","dataChanged","data","getPickingInfo","info","sourceLayer","Object","assign","object","index","renderLayers","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","updateTriggers","PolygonFillLayer","getSubLayerClass","SolidPolygonLayer","PolygonStrokeLayer","PathLayer","LineStringsLayer","PointsLayer","ScatterplotLayer","polygonFillLayer","shouldRenderSubLayer","getPolygon","getSubLayerProps","id","polygonLineLayer","widthUnits","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","layerName"],"mappings":";;;;;;;;;AAoBA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AAOA,MAAMA,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,MAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAzB;AACA,MAAMC,eAAe,GAAG,IAAIC,iCAAJ,EAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,SAAS,EAAE,KAJQ;AAMnBC,EAAAA,cAAc,EAAE,QANG;AAOnBC,EAAAA,cAAc,EAAE,CAPG;AAQnBC,EAAAA,kBAAkB,EAAE,CARD;AASnBC,EAAAA,kBAAkB,EAAEC,MAAM,CAACC,gBATR;AAUnBC,EAAAA,gBAAgB,EAAE,KAVC;AAWnBC,EAAAA,cAAc,EAAE,CAXG;AAanBC,EAAAA,cAAc,EAAE,CAbG;AAenBC,EAAAA,gBAAgB,EAAE,CAfC;AAgBnBC,EAAAA,oBAAoB,EAAE,CAhBH;AAiBnBC,EAAAA,oBAAoB,EAAEP,MAAM,CAACC,gBAjBV;AAmBnBO,EAAAA,iBAAiB,EAAE,KAnBA;AAoBnBC,EAAAA,IAAI,EAAE,KApBa;AAuBnBC,EAAAA,YAAY,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEzB;AAA1B,GAvBK;AAyBnB0B,EAAAA,YAAY,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAExB;AAA1B,GAzBK;AA2BnB0B,EAAAA,SAAS,EAAE;AAACH,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GA3BQ;AA6BnBG,EAAAA,YAAY,EAAE;AAACJ,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GA7BK;AA+BnBI,EAAAA,gBAAgB,EAAE;AAACL,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GA/BC;AAiCnBK,EAAAA,YAAY,EAAE;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAjCK;AAmCnBM,EAAAA,QAAQ,EAAE7B;AAnCS,CAArB;;AAsCA,SAAS8B,cAAT,CAAwBC,CAAxB,EAA2B;AACzB,SAAOA,CAAC,CAACC,QAAF,CAAWC,WAAlB;AACD;;AAKD,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC,OAAOA,QAAP;AAEpC,SAAOC,OAAO,IAAID,QAAQ,CAAC,kCAAoBC,OAApB,CAAD,CAA1B;AACD;;AAEc,MAAMC,YAAN,SAA2BC,kCAA3B,CAA0C;AACvDC,EAAAA,eAAe,GAAG;AAChB,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAGD;;AAEDC,EAAAA,WAAW,OAAiC;AAAA,QAAhC;AAACC,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAgC;;AAC1C,QAAIA,WAAW,CAACC,WAAhB,EAA6B;AAC3B,YAAM;AAACC,QAAAA;AAAD,UAASH,KAAf;AACA,YAAMH,QAAQ,GAAG,iCAAmBM,IAAnB,CAAjB;AACA,WAAKP,KAAL,CAAWC,QAAX,GAAsB,sCAAwBA,QAAxB,CAAtB;AACD;AACF;;AAEDO,EAAAA,cAAc,QAAsB;AAAA,QAArB;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAqB;AAIlC,WAAOC,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;AAEzBI,MAAAA,MAAM,EAAEJ,IAAI,CAACI,MAAL,GAAc,kCAAoBJ,IAAI,CAACI,MAAzB,CAAd,GAAiDJ,IAAI,CAACI,MAFrC;AAGzBC,MAAAA,KAAK,EAAEL,IAAI,CAACI,MAAL,GAAc,uCAAyBJ,IAAI,CAACI,MAA9B,CAAd,GAAsDJ,IAAI,CAACK;AAHzC,KAApB,CAAP;AAKD;;AAGDC,EAAAA,YAAY,GAAG;AACb,UAAM;AAACd,MAAAA;AAAD,QAAa,KAAKD,KAAxB;AACA,UAAM;AAACgB,MAAAA,aAAD;AAAgBC,MAAAA,YAAhB;AAA8BC,MAAAA,eAA9B;AAA+CC,MAAAA;AAA/C,QAAyElB,QAA/E;AAGA,UAAM;AAACtC,MAAAA,OAAD;AAAUC,MAAAA,MAAV;AAAkBC,MAAAA,QAAlB;AAA4BC,MAAAA,SAA5B;AAAuCuB,MAAAA,QAAvC;AAAiD+B,MAAAA;AAAjD,QAAgE,KAAKhB,KAA3E;AAGA,UAAM;AACJrC,MAAAA,cADI;AAEJC,MAAAA,cAFI;AAGJC,MAAAA,kBAHI;AAIJC,MAAAA,kBAJI;AAKJG,MAAAA,gBALI;AAMJC,MAAAA,cANI;AAOJE,MAAAA,gBAPI;AAQJC,MAAAA,oBARI;AASJC,MAAAA,oBATI;AAUJH,MAAAA,cAVI;AAWJI,MAAAA,iBAXI;AAYJC,MAAAA;AAZI,QAaF,KAAKwB,KAbT;AAgBA,UAAM;AACJvB,MAAAA,YADI;AAEJG,MAAAA,YAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,gBALI;AAMJC,MAAAA,YANI;AAOJiC,MAAAA;AAPI,QAQF,KAAKjB,KART;AAUA,UAAMkB,gBAAgB,GAAG,KAAKC,gBAAL,CAAsB,eAAtB,EAAuCC,0BAAvC,CAAzB;AACA,UAAMC,kBAAkB,GAAG,KAAKF,gBAAL,CAAsB,iBAAtB,EAAyCG,kBAAzC,CAA3B;AACA,UAAMC,gBAAgB,GAAG,KAAKJ,gBAAL,CAAsB,cAAtB,EAAsCG,kBAAtC,CAAzB;AACA,UAAME,WAAW,GAAG,KAAKL,gBAAL,CAAsB,QAAtB,EAAgCM,yBAAhC,CAApB;AAGA,UAAMC,gBAAgB,GACpB,KAAKC,oBAAL,CAA0B,eAA1B,EAA2Cb,eAA3C,KACA,IAAII,gBAAJ,CACE;AACE1C,MAAAA,IADF;AAEEf,MAAAA,QAFF;AAGEU,MAAAA,cAHF;AAIEX,MAAAA,MAJF;AAKEE,MAAAA,SALF;AAMEuB,MAAAA,QANF;AAOED,MAAAA,YAAY,EAAEM,kBAAkB,CAACN,YAAD,CAPlC;AAQEJ,MAAAA,YAAY,EAAEU,kBAAkB,CAACV,YAAD,CARlC;AASEH,MAAAA,YAAY,EAAEa,kBAAkB,CAACb,YAAD,CATlC;AAWEuC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BY,QAAAA,UAAU,EAAEZ,WAAW,CAAC5B,QADE;AAE1BJ,QAAAA,YAAY,EAAEgC,WAAW,CAAChC,YAFA;AAG1BJ,QAAAA,YAAY,EAAEoC,WAAW,CAACpC,YAHA;AAI1BH,QAAAA,YAAY,EAAEuC,WAAW,CAACvC;AAJA;AAX9B,KADF,EAmBE,KAAKoD,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,eADgB;AAEpBb,MAAAA,cAAc,EAAE;AACdjC,QAAAA,YAAY,EAAEiC,cAAc,CAACjC,YADf;AAEdJ,QAAAA,YAAY,EAAEqC,cAAc,CAACrC,YAFf;AAGdH,QAAAA,YAAY,EAAEwC,cAAc,CAACxC;AAHf;AAFI,KAAtB,CAnBF,EA2BE;AACE0B,MAAAA,IAAI,EAAEW,eADR;AAEEc,MAAAA,UAAU,EAAE1C;AAFd,KA3BF,CAFF;AAmCA,UAAM6C,gBAAgB,GACpB,CAACtE,QAAD,IACAF,OADA,IAEA,KAAKoE,oBAAL,CAA0B,iBAA1B,EAA6CZ,sBAA7C,CAFA,IAGA,IAAIM,kBAAJ,CACE;AACE7C,MAAAA,IADF;AAEEwD,MAAAA,UAAU,EAAErE,cAFd;AAGEsE,MAAAA,UAAU,EAAErE,cAHd;AAIEsE,MAAAA,cAAc,EAAErE,kBAJlB;AAKEsE,MAAAA,cAAc,EAAErE,kBALlB;AAMEsE,MAAAA,OAAO,EAAEnE,gBANX;AAOEoE,MAAAA,UAAU,EAAEnE,cAPd;AAQEoE,MAAAA,aAAa,EAAE/D,iBARjB;AAUEgE,MAAAA,QAAQ,EAAEjD,kBAAkB,CAACb,YAAD,CAV9B;AAWE+D,MAAAA,QAAQ,EAAElD,kBAAkB,CAACR,YAAD,CAX9B;AAYE2D,MAAAA,YAAY,EAAEnD,kBAAkB,CAACP,gBAAD,CAZlC;AAcEiC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1B0B,QAAAA,OAAO,EAAE1B,WAAW,CAAC5B,QADK;AAE1BmD,QAAAA,QAAQ,EAAEvB,WAAW,CAACvC,YAFI;AAG1B+D,QAAAA,QAAQ,EAAExB,WAAW,CAAClC;AAHI;AAd9B,KADF,EAqBE,KAAK+C,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,iBADgB;AAEpBb,MAAAA,cAAc,EAAE;AACdsB,QAAAA,QAAQ,EAAEtB,cAAc,CAACxC,YADX;AAEd+D,QAAAA,QAAQ,EAAEvB,cAAc,CAACnC,YAFX;AAGd2D,QAAAA,YAAY,EAAExB,cAAc,CAAClC;AAHf;AAFI,KAAtB,CArBF,EA6BE;AACEoB,MAAAA,IAAI,EAAEY,sBADR;AAEE2B,MAAAA,OAAO,EAAExD;AAFX,KA7BF,CAJF;AAuCA,UAAMyD,SAAS,GACb,KAAKhB,oBAAL,CAA0B,aAA1B,EAAyCd,YAAzC,KACA,IAAIU,gBAAJ,CACE;AACE/C,MAAAA,IADF;AAEEwD,MAAAA,UAAU,EAAErE,cAFd;AAGEsE,MAAAA,UAAU,EAAErE,cAHd;AAIEsE,MAAAA,cAAc,EAAErE,kBAJlB;AAKEsE,MAAAA,cAAc,EAAErE,kBALlB;AAMEsE,MAAAA,OAAO,EAAEnE,gBANX;AAOEoE,MAAAA,UAAU,EAAEnE,cAPd;AAQEoE,MAAAA,aAAa,EAAE/D,iBARjB;AAUEgE,MAAAA,QAAQ,EAAEjD,kBAAkB,CAACb,YAAD,CAV9B;AAWE+D,MAAAA,QAAQ,EAAElD,kBAAkB,CAACR,YAAD,CAX9B;AAYE2D,MAAAA,YAAY,EAAEnD,kBAAkB,CAACP,gBAAD,CAZlC;AAcEiC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1B0B,QAAAA,OAAO,EAAE1B,WAAW,CAAC5B,QADK;AAE1BmD,QAAAA,QAAQ,EAAEvB,WAAW,CAACvC,YAFI;AAG1B+D,QAAAA,QAAQ,EAAExB,WAAW,CAAClC;AAHI;AAd9B,KADF,EAqBE,KAAK+C,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,cADgB;AAEpBb,MAAAA,cAAc,EAAE;AACdsB,QAAAA,QAAQ,EAAEtB,cAAc,CAACxC,YADX;AAEd+D,QAAAA,QAAQ,EAAEvB,cAAc,CAACnC,YAFX;AAGd2D,QAAAA,YAAY,EAAExB,cAAc,CAAClC;AAHf;AAFI,KAAtB,CArBF,EA6BE;AACEoB,MAAAA,IAAI,EAAEU,YADR;AAEE6B,MAAAA,OAAO,EAAExD;AAFX,KA7BF,CAFF;AAqCA,UAAM0D,UAAU,GACd,KAAKjB,oBAAL,CAA0B,QAA1B,EAAoCf,aAApC,KACA,IAAIY,WAAJ,CACE;AACEhD,MAAAA,IADF;AAEEjB,MAAAA,OAFF;AAGEC,MAAAA,MAHF;AAIEqF,MAAAA,WAAW,EAAEzE,gBAJf;AAKE0E,MAAAA,eAAe,EAAEzE,oBALnB;AAME0E,MAAAA,eAAe,EAAEzE,oBANnB;AAOEX,MAAAA,cAPF;AAQEC,MAAAA,cARF;AASEC,MAAAA,kBATF;AAUEC,MAAAA,kBAVF;AAYEc,MAAAA,YAAY,EAAEU,kBAAkB,CAACV,YAAD,CAZlC;AAaEH,MAAAA,YAAY,EAAEa,kBAAkB,CAACb,YAAD,CAblC;AAcEI,MAAAA,SAAS,EAAES,kBAAkB,CAACT,SAAD,CAd/B;AAeEC,MAAAA,YAAY,EAAEQ,kBAAkB,CAACR,YAAD,CAflC;AAiBEkC,MAAAA,WAAW,EAAEA,WAAW,IAAI;AAC1BgC,QAAAA,WAAW,EAAEhC,WAAW,CAAC5B,QADC;AAE1BR,QAAAA,YAAY,EAAEoC,WAAW,CAACpC,YAFA;AAG1BH,QAAAA,YAAY,EAAEuC,WAAW,CAACvC,YAHA;AAI1BI,QAAAA,SAAS,EAAEmC,WAAW,CAACnC,SAJG;AAK1BC,QAAAA,YAAY,EAAEkC,WAAW,CAAClC;AALA;AAjB9B,KADF,EA0BE,KAAK+C,gBAAL,CAAsB;AACpBC,MAAAA,EAAE,EAAE,QADgB;AAEpBb,MAAAA,cAAc,EAAE;AACdrC,QAAAA,YAAY,EAAEqC,cAAc,CAACrC,YADf;AAEdH,QAAAA,YAAY,EAAEwC,cAAc,CAACxC,YAFf;AAGdI,QAAAA,SAAS,EAAEoC,cAAc,CAACpC,SAHZ;AAIdC,QAAAA,YAAY,EAAEmC,cAAc,CAACnC;AAJf;AAFI,KAAtB,CA1BF,EAmCE;AACEqB,MAAAA,IAAI,EAAES,aADR;AAEEoC,MAAAA,WAAW,EAAE9D;AAFf,KAnCF,CAFF;AA2CA,WAAO,CAEL,CAACzB,QAAD,IAAaiE,gBAFR,EAGLK,gBAHK,EAILY,SAJK,EAKLC,UALK,EAOLnF,QAAQ,IAAIiE,gBAPP,CAAP;AASD;;AAtOsD;;;AA0OzDjC,YAAY,CAACwD,SAAb,GAAyB,cAAzB;AACAxD,YAAY,CAACnC,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { CompositeLayer } from 'kepler-outdated-deck.gl-core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport { PhongMaterial } from 'kepler-outdated-luma.gl-core';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nimport {\n  getGeojsonFeatures,\n  separateGeojsonFeatures,\n  unwrapSourceFeature,\n  unwrapSourceFeatureIndex\n} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  lineDashJustified: false,\n  fp64: false,\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\n/**\n * Unwraps the real source feature passed into props and passes as the argument to `accessor`.\n */\nfunction unwrappingAccessor(accessor) {\n  if (typeof accessor !== 'function') return accessor;\n\n  return feature => accessor(unwrapSourceFeature(feature));\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      const {data} = props;\n      const features = getGeojsonFeatures(data);\n      this.state.features = separateGeojsonFeatures(features);\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    // `info.index` is the index within the particular sub-layer\n    // We want to expose the index of the feature the user provided\n\n    return Object.assign(info, {\n      // override object with picked feature\n      object: info.object ? unwrapSourceFeature(info.object) : info.object,\n      index: info.object ? unwrapSourceFeatureIndex(info.object) : info.index\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, material, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          fp64,\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          material,\n          getElevation: unwrappingAccessor(getElevation),\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          fp64,\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          fp64,\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          fp64,\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthUnits,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n          getRadius: unwrappingAccessor(getRadius),\n          getLineWidth: unwrappingAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}