{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["fp64LowPart","fp64","DEFAULT_COLOR","defaultProps","iconAtlas","iconMapping","type","value","async","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","Layer","getShaders","projectModule","use64bitProjection","vs","fs","modules","initializeState","state","iconManager","IconManager","context","gl","onUpdate","_onUpdate","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceSizes","defaultValue","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","calculateInstanceColorMode","instanceColors","instanceAngles","updateState","oldProps","props","changeFlags","data","iconMappingChanged","setProps","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","model","delete","setState","_getModel","invalidateAll","finalizeState","finalize","draw","uniforms","viewport","iconsTexture","getTexture","setUniforms","Object","assign","iconsTextureDim","width","height","distanceScales","metersPerPixel","positions","Model","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","shaderCache","setNeedsRedraw","attribute","isFP64","use64bitPositions","constant","i","iterable","objectInfo","object","index","startRow","endRow","rect","getIconMapping","anchorX","anchorY","mapping","colorMode","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport { Layer, createIterable } from 'kepler-outdated-deck.gl-core';\nimport GL from 'kepler-outdated-luma.gl-constants';\nimport { Model, Geometry, fp64 } from 'kepler-outdated-luma.gl-core';\n\nconst {fp64LowPart} = fp64;\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: null,\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  fp64: false,\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconManager} = this.state;\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n\n    let iconMappingChanged = false;\n\n    // prepacked iconAtlas from user\n    if (iconAtlas) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            iconsTexture,\n            iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n            sizeScale:\n              sizeScale * (sizeUnits === 'pixels' ? viewport.distanceScales.metersPerPixel[2] : 1),\n            sizeMinPixels,\n            sizeMaxPixels,\n            billboard\n          })\n        )\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const position = getPosition(object, objectInfo);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceOffsets(attribute, {startRow, endRow}) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const rect = iconManager.getIconMapping(object, objectInfo);\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute, {startRow, endRow}) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const mapping = iconManager.getIconMapping(object, objectInfo);\n      const colorMode = mapping.mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute, {startRow, endRow}) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const rect = iconManager.getIconMapping(object, objectInfo);\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}